#+TAGS: custom(c) lisp(l) usepackage(u)
#+SEQ_TODO: TODO(t) FIX(f) DISABLED(i) | DONE(d)
#+TITLE: config.org
#+Changed: 27.11.2024

* Literate Emacs configuration
** Installation
Add ~site-start.el~ in ~c:\Program Files\GNU Emacs\emacs_27.2\share\emacs\27.2\site-lisp\~ and add:
#+begin_src lisp
(setenv "HOME" "D:/Privat/Nextcloud")
(setq package-user-dir "~/.emacs.d/elpa")
#+end_src
to set path to ~.emacs.d/~ folder.


* environment                                                        :custom:
M-x getenv <RET> PATH <RET>
** IEEH (Win10) EVMI80
#+begin_src emacs-lisp
(when (string-equal system-name "EVMI80")
  (let ((mypaths
         '("C:/Program Files (x86)/gnupg14"
           "C:/Program Files/R/R-4.4.1/bin/x64"
           "C:/Program Files/git/bin"
           "C:/Program Files/Hunspell/hunspell-v1.7.2/bin/"
           "C:/cygwin64"
           "C:/Python311"
           "C:/Windows/System32"
           "C:/rtools43"
           "C:/rtools43/mingw64/bin"
           "C:/texlive/2023/bin/windows"
           "D:/Privat/Ledger"
           "D:/Users/domagk/AppData/Local/Pandoc"
           "D:/Users/domagk/AppData/Local/Programs/Quarto/bin")))
    (setenv "PATH" (mapconcat 'identity mypaths ";"))
    (setq exec-path (append mypaths (list "." exec-directory))))
  (set-frame-font "Consolas-9" nil t)
  (setq mx-use-theme "leuven")
)
#+end_src

** HOME (Win11) Lenovo
#+begin_src emacs-lisp
(when (string-equal system-name "LENOVO")
  (let ((mypaths
         '("C:/Program Files (x86)/GNU GnuPG"
           ;;"C:/Program Files/Graphviz/bin"
           ;;"C:/Program Files/Quarto/bin"
           "C:/Program Files/R/R-4.4.1/bin/x64"
           "C:/Program Files/git/bin"
           "C:/texlive/2023/bin/windows"
           "C:/Users/mdoma/AppData/Local/Pandoc"
           "C:/Max/Ledger_312")))
    (setenv "PATH" (mapconcat 'identity mypaths ";"))
    (setq exec-path (append mypaths (list "." exec-directory))))
  (setq mx-use-theme "leuven")
  (set-frame-font "Consolas-10" nil t)
)
#+end_src

* general settings                                                   :custom:
** default font
additional options KEEP-SIZE and FRAMES
#+begin_src emacs-lisp


;; solve fixed-pitch issue for windows
;;https://yoo2080.wordpress.com/2013/05/30/ms-windows-emacs-fixed-pitch-got-no-anti-aliasing/
(if (eq system-type 'windows-nt)
    (set-face-attribute 'fixed-pitch nil :family
                        (face-attribute 'default :family)))
#+end_src

** user name and e-mail
#+begin_src emacs-lisp
(setq user-full-name "Max Domagk")
(setq user-mail-adress "mdomagk@posteo.de")
#+end_src


** TODO disable lockfiles for now
nextcloud syncs .#* files and needs a fix for .sync-exclude.lst
#+begin_src emacs-lisp
(setq create-lockfiles nil)
#+end_src

** set custom.el so emacs leaves my init file alone
#+begin_src emacs-lisp
(setq custom-file (expand-file-name "custom.el" user-emacs-directory))
#+end_src

** debugging disabled
#+begin_src emacs-lisp
(setq debug-on-error nil) ;; t nil
#+end_src

** indendation with space
#+begin_src emacs-lisp
;; use whitespaces instead of TAB
(setq-default indent-tabs-mode nil)

;; 1 TAB equals N spaces
(setq tab-width 2)

;; use TAB function for identation
(setq indent-line-function 'insert-tab)
#+end_src


** encoding
http://www.masteringemacs.org/articles/2012/08/09/working-coding-systems-unicode-emacs/
#+begin_src emacs-lisp
(prefer-coding-system 'utf-8)
(set-default-coding-systems 'utf-8)
(set-terminal-coding-system 'utf-8)
(set-keyboard-coding-system 'utf-8)

(add-to-list 'file-coding-system-alist '("\\.tex" . utf-8))
(add-to-list 'file-coding-system-alist '("\\.txt" . utf-8))
(add-to-list 'file-coding-system-alist '("\\.org" . utf-8))
(add-to-list 'file-coding-system-alist '("\\.el" . utf-8))

;; cliplboard
(set-selection-coding-system 'utf-8)
(set-clipboard-coding-system 'utf-16-le)
(set-selection-coding-system 'utf-16-le)
#+end_src

** define aliases for faster M-x
#+begin_src emacs-lisp
(defalias 'qrr 'query-replace-regexp)
(defalias 'lml 'list-matching-lines)
(defalias 'dml 'delete-matching-lines)
(defalias 'dnml 'delete-non-matching-lines)
(defalias 'sl 'sort-lines)
#+end_src

** window title
adjust window title to "emacs: path/actual-buffer"
#+begin_src emacs-lisp
(setq frame-title-format
      '((:eval (if (buffer-file-name)
                   (abbreviate-file-name (buffer-file-name))
                 "%b"))))
#+end_src


** delete trailing whitespace
#+begin_src emacs-lisp
(add-hook 'before-save-hook (lambda () (delete-trailing-whitespace)))
#+end_src

** update date on save
update date in header on save
#+begin_src emacs-lisp
(setq
 time-stamp-active t
 ;; check first 10 buffer lines for Time-stamp:
 time-stamp-line-limit 10
 ;; date format
 time-stamp-format "%02d.%02m.%Y"
 ;; identifier
 time-stamp-start "Changed: "
 time-stamp-end "$")

(add-hook 'write-file-hooks 'time-stamp)
#+end_src

** set default frame width
#+begin_src emacs-lisp
(add-to-list 'default-frame-alist '(width . 82))
#+end_src

** disable startup message in scratch buffer
#+begin_src emacs-lisp
(setq-default initial-scratch-message nil)
#+end_src

** disable default splash screen
#+begin_src emacs-lisp
(setq inhibit-startup-message t)
#+end_src

** remove auto-window-scroll (high CPU usage)
https://emacs.stackexchange.com/questions/28736/emacs-pointcursor-movement-lag/28746
#+begin_src emacs-lisp
(setq auto-window-vscroll nil)
#+end_src

** turn off mouse interface
#+begin_src emacs-lisp
(if (fboundp 'menu-bar-mode) (menu-bar-mode -1))
(if (fboundp 'tool-bar-mode) (tool-bar-mode -1))
(if (fboundp 'scroll-bar-mode) (scroll-bar-mode -1))
#+end_src

** set major-mode to text
#+begin_src emacs-lisp
(setq-default major-mode 'text-mode)
#+end_src

** make alarm sound only
visible (t), not visible (nil)
#+begin_src emacs-lisp
(setq visible-bell t)
#+end_src

** enable winner mode
C-c <left> to get to the previous window configuration
#+begin_src emacs-lisp
(winner-mode 1)
#+end_src

** show unfinished keystrokes early
#+begin_src emacs-lisp
(setq echo-keystrokes 0.1)
#+end_src

** blinking cursor on
1 (on) / 0 (off)
#+begin_src emacs-lisp
(blink-cursor-mode 1)
#+end_src

** highligh current line off
1 (on) / 0 (off)
#+begin_src emacs-lisp
(global-hl-line-mode 0)
#+end_src

** enable CUA mode
Common User Access
#+begin_src emacs-lisp
;; windows-like behaviour to cut, copy & paste with ctrl + x, c & v
;; (setq cua-highlight-region-shift-only t) ;; no transient mark mode
;; (setq cua-toggle-set-mark nil) ;; original set-mark behavior, i.e. no transient-mark-mode
(cua-mode)
#+end_src

** syntax highlighting everywhere
#+begin_src emacs-lisp
(global-font-lock-mode t)
#+end_src

** sane select (mark) mode
#+begin_src emacs-lisp
(transient-mark-mode 1)
#+end_src

** entry deletes marked text
#+begin_src emacs-lisp
(delete-selection-mode t)
#+end_src

** match parentheses
#+begin_src emacs-lisp
(show-paren-mode t)
;;(setq show-paren-style 'expression)
;;(setq show-paren-when-point-in-periphery t)
;;(setq show-paren-when-point-inside-paren nil)
#+end_src

** font highlighting matlab .m files
#+begin_src emacs-lisp
(add-to-list 'auto-mode-alist '("\\.m\\'" . octave-mode))
#+end_src

** quit emacs with y or n
instead of yes or no accept y or n
#+begin_src emacs-lisp
(fset 'yes-or-no-p 'y-or-n-p)
#+end_src

** make sure all backup files only live in one place
#+begin_src emacs-lisp
(defvar my-backup-folder (concat "~/.emacs.d/backups" "/"))

(setq backup-directory-alist `((".*" . ,my-backup-folder))
      backup-by-copying t    ; Don't delink hardlinks
      version-control t      ; Use version numbers on backups
      delete-old-versions t  ; Automatically delete excess backups
      kept-new-versions 20   ; how many of the newest versions to keep
      kept-old-versions 5    ; and how many of the old
      )
#+end_src

** set auto-save directory
#+begin_src emacs-lisp
(setq auto-save-default nil) ; just turn off

;; ;; move to one directory
;;(setq auto-save-file-name-transforms `((".*" "~/.emacs.d/auto-save/" t)))
#+end_src

** visual line mode and toggle to truncate my lines
#+begin_src emacs-lisp
(global-visual-line-mode 1)
;; enable line wrap
(setq default-truncate-lines t)
;; make side by side buffers function the same as the main window
(setq truncate-partial-width-windows nil)
;; Add F3 to toggle line wrap
(global-set-key (kbd "<f3>") 'toggle-truncate-lines)

;;(setq-default truncate-lines nil)
#+end_src

** explicitly show the end of a buffer
#+begin_src emacs-lisp
(set-default 'indicate-empty-lines t)
#+end_src

** trash can support
#+begin_src emacs-lisp
(setq delete-by-moving-to-trash t)
#+end_src

** sentences have one space after a period
#+begin_src emacs-lisp
(setq sentence-end-double-space nil)
#+end_src



** Automatically revert buffers for changed files
#+begin_src emacs-lisp
(global-auto-revert-mode 1)
#+end_src

* functions                                                          :custom:
** mx-kill-buffer
It's simple. Bury the scratch buffer
#+begin_src emacs-lisp
(setq mx-never-kill-buffers '("*scratch*" "*Messages*"))

(defun mx-kill-buffer (buffer)
  "Protect some special buffers from getting killed."
  (interactive (list (current-buffer)))
  (if (member (buffer-name buffer) mx-never-kill-buffers)
      (call-interactively 'bury-buffer buffer)
    (kill-buffer buffer)))
#+end_src

** mx-ask-before-closing
#+begin_src emacs-lisp
(defun mx-ask-before-closing ()
  "Ask whether or not to close, and then close if y was pressed"
  (interactive)
  (if (yes-or-no-p (format "<<< close EMACS ???  >>>  "))
      (if (< emacs-major-version 22)
          (save-buffers-kill-terminal)
        (save-buffers-kill-emacs))))
#+end_src

** mx-rotate-windows
#+begin_src emacs-lisp
(defun mx-rotate-windows ()
  "Rotate your windows"
  (interactive)
  (cond ((not (> (count-windows)1))
         (message "You can't rotate a single window!"))
        (t
         (setq i 1)
         (setq numWindows (count-windows))
         (while  (< i numWindows)
           (let* (
                  (w1 (elt (window-list) i))
                  (w2 (elt (window-list) (+ (% i numWindows) 1)))

                  (b1 (window-buffer w1))
                  (b2 (window-buffer w2))

                  (s1 (window-start w1))
                  (s2 (window-start w2))
                  )
             (set-window-buffer w1  b2)
             (set-window-buffer w2 b1)
             (set-window-start w1 s2)
             (set-window-start w2 s1)
             (setq i (1+ i)))))))
#+end_src

** mx-save-symbol-at-point
copy word/symbol at point
#+begin_src emacs-lisp
(defun mx-save-symbol-at-point ()
  "Make symbol at point the latest kill in the kill ring."
  (interactive)
  (let ((symbol (thing-at-point 'symbol)))
    (when symbol (kill-new symbol))))

(global-set-key (kbd "M-w")  'mx-save-symbol-at-point)
#+end_src

** mx-next/previous-buffer
ignore buffers while switching
#+begin_src emacs-lisp
(setq mx-skippable-buffer-list '("*Messages*" "*ESS*" "*Flymake log*" "*Help*" "work.org" "home.org" "calendar.org" "*Calendar*"))

(setq mx-skippable-buffer-regex "^magit")

(defun mx-next-buffer ()
  "next-buffer that skips certain buffers"
  (interactive)
  (next-buffer)
  (while (or
          (member (buffer-name) mx-skippable-buffer-list)
          (string-match-p mx-skippable-buffer-regex (buffer-name)))
    (next-buffer)))

(defun mx-previous-buffer ()
  "previous-buffer that skips certain buffers"
  (interactive)
  (previous-buffer)
  (while (or
          (member (buffer-name) mx-skippable-buffer-list)
          (string-match-p mx-skippable-buffer-regex (buffer-name)))
    (previous-buffer)))
#+end_src

** xah-brackets
move cursor to brackets
#+begin_src emacs-lisp
(defvar xah-brackets nil "string of left/right brackets pairs.")
(setq xah-brackets "()[]{}<>")

(defvar xah-left-brackets '("(" "{" "[" "<")
  "List of left bracket chars.")
(progn
  ;; make xah-left-brackets based on xah-brackets
  (setq xah-left-brackets '())
  (dotimes ($x (- (length xah-brackets) 1))
    (when (= (% $x 2) 0)
      (push (char-to-string (elt xah-brackets $x))
            xah-left-brackets)))
  (setq xah-left-brackets (reverse xah-left-brackets)))

(defvar xah-right-brackets '(")" "]" "}" ">")
  "list of right bracket chars.")
(progn
  (setq xah-right-brackets '())
  (dotimes ($x (- (length xah-brackets) 1))
    (when (= (% $x 2) 1)
      (push (char-to-string (elt xah-brackets $x))
            xah-right-brackets)))
  (setq xah-right-brackets (reverse xah-right-brackets)))

(defun xah-backward-left-bracket ()
  "Move cursor to the previous occurrence of left bracket.
  The list of brackets to jump to is defined by `xah-left-brackets'.
  URL `http://ergoemacs.org/emacs/emacs_navigating_keys_for_brackets.html'
  Version 2015-10-01"
  (interactive)
  (re-search-backward (regexp-opt xah-left-brackets) nil t))

(defun xah-forward-right-bracket ()
  "Move cursor to the next occurrence of right bracket.
  The list of brackets to jump to is defined by `xah-right-brackets'.
  URL `http://ergoemacs.org/emacs/emacs_navigating_keys_for_brackets.html'
  Version 2015-10-01"
  (interactive)
  (re-search-forward (regexp-opt xah-right-brackets) nil t))
#+end_src



** sort-lines-nocase
- sort lines without case sensitivity
#+begin_src emacs-lisp
(defun sort-lines-nocase ()
  (interactive)
  (let ((sort-fold-case t))
    (call-interactively 'sort-lines)))
#+end_src

* keybindings                                                        :custom:
** emacs
#+begin_src emacs-lisp
;; ESC cancels everything
(global-set-key (kbd "<escape>") 'keyboard-escape-quit)
(global-set-key (kbd "C-x C-c") 'mx-ask-before-closing)
(global-set-key (kbd "C-x C-b")  'project-find-file)
(global-set-key [f5] 'call-last-kbd-macro)
;;(global-set-key [f11] 'tool-bar-mode)
(global-set-key [f12] 'menu-bar-mode)
#+end_src

** editing
#+begin_src emacs-lisp
(global-set-key (kbd "M-w")  'mx-save-symbol-at-point)

;; comment marked lines (matlab-like)
(global-set-key (kbd "C-t") 'uncomment-region)
(global-set-key (kbd "C-r") 'comment-region)

(global-set-key (kbd "M-ö") 'comment-or-uncomment-region)

;; join following lines into 1 line (M-j)
(global-set-key (kbd "M-j")
                (lambda ()
                  (interactive)
                  (join-line -1)))
#+end_src

** movement
#+begin_src emacs-lisp
(global-set-key (kbd "C-<next>")
                (lambda ()
                  (interactive)
                  (ignore-errors (next-line 5))))

(global-set-key (kbd "C-<prior>")
                (lambda ()
                  (interactive)
                  (ignore-errors (previous-line 5))))

;; move between brackets
(global-set-key (kbd "M-8") 'xah-backward-left-bracket)
(global-set-key (kbd "M-9") 'xah-forward-right-bracket)
#+end_src

** buffer
#+begin_src emacs-lisp
(global-set-key (kbd "C-s") 'save-buffer)
(global-set-key (kbd "C-w") 'mx-kill-buffer)
(global-set-key (kbd "C-b") 'switch-to-buffer)
(global-set-key (kbd "C-S-<tab>") 'mx-next-buffer)
(global-set-key (kbd "C-<tab>") 'mx-previous-buffer)
;;(add-hook 'org-mode-hook
;;          #'(lambda ()
;;             (define-key org-mode-map (kbd "C-<tab>") 'previous-buffer)))
#+end_src

** window
#+begin_src emacs-lisp
(global-set-key (kbd "S-C-<down>")  'enlarge-window)
(global-set-key (kbd "S-C-<up>")    'shrink-window)
(global-set-key (kbd "S-C-<left>")  'shrink-window-horizontally)
(global-set-key (kbd "S-C-<right>") 'enlarge-window-horizontally)

(global-set-key (kbd "M-o") 'other-window)
(global-set-key (kbd "M-p") 'mx-rotate-windows)
(global-set-key (kbd "M-1") 'delete-other-windows)
(global-set-key (kbd "M-2") 'split-window-horizontally)
(global-set-key (kbd "M-3") 'split-window-vertically)
(global-set-key (kbd "M-0") 'delete-window)

(global-unset-key (kbd "C-x 0")) ; was delete-window
(global-unset-key (kbd "C-x 3")) ; was split-window-horizontally
(global-unset-key (kbd "C-x 2")) ; was split-window-vertically
(global-unset-key (kbd "C-x 1")) ; was delete-other-window
(global-unset-key (kbd "C-x o")) ; was other-window
#+end_src


* org-mode                                                           :custom:
** general settings

#+begin_src emacs-lisp
(add-to-list 'auto-mode-alist '("\\.org\\'" . org-mode))

;; this is my org-directory
(setq org-directory "~/.emacs.d/org")

;; do not change states when archive TODOs
(setq org-archive-mark-done nil)

;; indentation
(setq org-startup-indented t)
(setq org-adapt-indentation nil)
(setq org-indent-indentation-per-level 1)
(setq org-indent-mode-turns-on-hiding-stars t)

;; enabling shift select
(setq org-support-shift-select t)
(setq org-startup-folded t)
(setq org-cycle-separator-lines 0)

(setq org-todo-keywords
      '((sequence "TODO(t)" "NEXT(n)" "SOMEDAY(s)" "|" "DONE(d)")
        (sequence "WAITING(w@/!)" "|" "CANCELED(c@)")))

;; TODO update keywords
(setq org-todo-keyword-faces
      '(;;("TODO"  . (:foreground "#b70101" :weight bold))
        ("NEXT"  . (:foreground "blue" :weight bold))
        ("SOMEDAY"  . (:foreground "forestgreen" :weight bold))
        ("WAITING"  . (:foreground "orange" :weight bold))
        ("DONE"  . (:foreground "grey" :weight bold))
        ("CANCELED"  . (:foreground "grey" :weight bold))
        ))

;; fast selection for states
(setq org-use-fast-todo-selection t)

;; log DONE status change
(setq org-log-done t)

;; keep log state notes in LOGBOOK
(setq org-log-state-notes-into-drawer "LOGBOOK")

;; Make it impossible to complete a task if subtasks are not done --> t (yes) nil (no)
(setq org-enforce-todo-dependencies nil)

;; Truncate clocked-in tasks in mode-line def. 0
(setq org-clock-string-limit 8)

;; html in browser and pdf in system deafult
(setq org-file-apps (quote ((auto-mode . emacs)
                            ("\\.x?html?\\'" . system)
                            ("\\.pdf\\'" . system))))
#+end_src

** org-agenda

#+begin_src emacs-lisp
;; link my GTD file to the agenda
(setq org-agenda-files
      (quote
       ("~/.emacs.d/org/inbox.org"
        "~/.emacs.d/org/home.org"
        "~/.emacs.d/org/work.org"
        "~/.emacs.d/org/calendar.org")))

;; agenda settings
(setq org-agenda-window-setup 'only-window); agenda takes whole window
(setq org-agenda-restore-windows-after-quit t)
(setq org-agenda-show-all-dates t)
(setq org-agenda-skip-deadline-if-done t)
(setq org-agenda-skip-scheduled-if-done t)

;; respect STARTUP: overview and don't unfold everything
(setq org-agenda-inhibit-startup nil)

;; only 1 day in agenda view
(setq org-agenda-span 1)

;; german day and month names, week starts with monday
(setq calendar-week-start-day 1
      calendar-day-name-array
      ["Sonntag" "Montag" "Dienstag" "Mittwoch"
       "Donnerstag" "Freitag" "Samstag"]
      calendar-month-name-array
      ["Januar" "Februar" "Maerz" "April" "Mai"
       "Juni" "Juli" "August" "September"
       "Oktober" "November" "Dezember"])

;; Set the times to display in the time grid
(setq org-agenda-time-grid (quote
                            ((daily today require-timed)
                             (0900 1100 1300 1500 1700)
                             "......" "----------------")))

;; max. 4 weeks
(setq org-deadline-warning-days 28)

;; truncate long lines in agenda view
;; https://superuser.com/a/531670
(add-hook 'org-agenda-mode-hook
          (lambda ()
            (visual-line-mode -1)
            (toggle-truncate-lines 1)))
#+end_src

** org-refile

#+begin_src emacs-lisp
(setq org-refile-targets
      '((nil :maxlevel . 5)
        (org-agenda-files :maxlevel . 5)))

(setq org-refile-use-outline-path 'file)
;; makes org-refile outline working with helm/ivy
(setq org-outline-path-complete-in-steps nil)
(setq org-refile-allow-creating-parent-nodes 'confirm)

;; save all org-buffers after refiling
(advice-add 'org-refile :after
	    (lambda (&rest _)
	      (org-save-all-org-buffers)))
#+end_src

** org-capture

#+begin_src emacs-lisp
(setq org-default-notes-file (concat org-directory "/inbox.org"))

;; create org-capture-templates
(setq org-capture-templates
      '(("i" "inbox.org" entry (file "~/.emacs.d/org/inbox.org")
         "* TODO %?\n%U\n")))
#+end_src


** org-babel
#+begin_src emacs-lisp

(org-babel-do-load-languages
 'org-babel-load-languages
 '((emacs-lisp . t)
   (R . t)
   ;;(ledger . t)
   (python . t)
   (latex . t)
   (dot . t)))

(defun mx-org-edit-src-save-key ()
  (local-set-key (kbd "C-s") 'org-edit-src-save))

(add-hook 'org-src-mode-hook 'mx-org-edit-src-save-key)

;; display the source code edit buffer in the current window, keeping
;; all other windows
(setq org-src-window-setup 'current-window)
;;(setq org-src-window-setup 'reorganize-frame)

(setq org-edit-src-auto-save-idle-delay 20) ;; in seconds; default 0 = off

;; preserve the indentation after editing a code block
(setq org-edit-src-content-indentation 0
      org-src-tab-acts-natively t
      org-src-preserve-indentation t)

;; I don't want to be prompted on every code block evaluation
(setq org-confirm-babel-evaluate nil)

;; Don't execute code blocks with C-c C-c use C-c C-v e instead
(setq org-babel-no-eval-on-ctrl-c-ctrl-c nil) ;; nil t

;; color my SRC code natively
(setq org-src-fontify-natively t)
#+end_src

** keybindings
#+begin_src emacs-lisp
(defun mx-org-file-home ()
  (interactive)
  (find-file "~/.emacs.d/org/home.org"))

(defun mx-org-file-work ()
  (interactive)
  (find-file "~/.emacs.d/org/work.org"))

(defun mx-org-file-inbox ()
  (interactive)
  (find-file "~/.emacs.d/org/inbox.org"))

(defun mx-org-todo ()
  (interactive)
  (org-narrow-to-subtree)
  (org-show-todo-tree nil)
  (widen))

;; FIXME doesn't work
(defun mx-org-capture-inbox ()
     (interactive)
     (call-interactively 'org-capture)
     (org-capture nil "i"))

(add-hook 'org-mode-hook
          #'(lambda ()
             (local-set-key (kbd "S-C-<down>")  'enlarge-window)
             (local-set-key (kbd "S-C-<up>")    'shrink-window)
             (local-set-key (kbd "S-C-<left>")  'shrink-window-horizontally)
             (local-set-key (kbd "S-C-<right>") 'enlarge-window-horizontally)))


(global-set-key [f8]  'mx-org-todo)
(global-set-key [f9]  'mx-org-file-home)
(global-set-key [f10] 'mx-org-file-work)
(global-set-key [f11] 'mx-org-file-inbox)

(global-set-key (kbd "C-c a") 'org-agenda)
(global-set-key (kbd "C-c c") 'org-capture)
;;(global-set-key (kbd "C-c i") 'mx-org-capture-inbox)
;;(global-set-key (kbd "C-c l") 'org-store-link)
#+end_src

** custom agenda views
- https://blog.aaronbieber.com/2016/09/24/an-agenda-for-life-with-org-mode.html
#+begin_src emacs-lisp

(setq org-agenda-custom-commands
      '(
        ("x" "Agenda at home"
         ((agenda ""
                  ((org-agenda-files (remove "~/.emacs.d/org/work.org" org-agenda-files))))
          (todo "NEXT"
                ((org-agenda-overriding-header "Tasks")
                 (org-agenda-files (remove "~/.emacs.d/org/work.org" org-agenda-files))))
          (todo "WAITING"
                ((org-agenda-overriding-header "Waiting")
                 (org-agenda-files (remove "~/.emacs.d/org/work.org" org-agenda-files))))))

        ("X" "Tasks at home"
         ((todo "NEXT|TODO|WAITING"
                ((org-agenda-overriding-header "Tasks at Home")
                 (org-agenda-files (remove "~/.emacs.d/org/work.org" org-agenda-files))))))
        ;;(tags-todo "Lehre" ((org-agenda-overriding-header "Lehre & Betreuung"))))

        ("w" "Agenda at work"
         ((agenda ""
                  ((org-agenda-files (remove "~/.emacs.d/org/home.org" org-agenda-files))))
          (todo "NEXT"
                ((org-agenda-overriding-header "Tasks")
                 (org-agenda-files (remove "~/.emacs.d/org/home.org" org-agenda-files))))
          (todo "WAITING"
                ((org-agenda-overriding-header "Waiting")
                 (org-agenda-files (remove "~/.emacs.d/org/home.org" org-agenda-files))))))

        ("W" "Tasks at Work"
         ((todo "NEXT|TODO|WAITING"
                ((org-agenda-overriding-header "Tasks at Work")
                 (org-agenda-files (remove "~/.emacs.d/org/home.org" org-agenda-files))))))

        )
      )

#+end_src

** auto-update headers
- auto-update [x/y] in org-headers
- http://whattheemacsd.com/setup-org.el-01.html
#+begin_src emacs-lisp
(defun myorg-update-parent-cookie ()
  (when (equal major-mode 'org-mode)
    (save-excursion
      (ignore-errors
        (org-back-to-heading)
        (org-update-parent-todo-statistics)))))

(defadvice org-kill-line (after fix-cookies activate)
  (myorg-update-parent-cookie))

(defadvice kill-whole-line (after fix-cookies activate)
  (myorg-update-parent-cookie))
#+end_src

* abbreviations                                                      :custom:
#+begin_src emacs-lisp
(define-abbrev-table 'global-abbrev-table '(

 ("9f" "tar_file(@@),")
 ("9t" "tar_target(@@),")
 ("9tt" "tar_target(@@, format = \"fst_tbl\"),")

 ("9m" "targets::tar_make()")
 ("9mm" "targets::tar_make(reporter = \"summary\")")

 ("9v" "targets::tar_visnetwork()")
 ("9vv" "targets::tar_visnetwork(targets_only = TRUE)")

 ("9l" "targets::tar_load(@@)")
 ("9r" "targets::tar_read(@@)")

 ("9p" "paint::paint(@@)")

 ("8png" "png(filename = \"@@.png\", units = \"cm\", res = 300, width = 16, height = 10)\n\ndev.off()")

 ("8r" "`r @@`")
 ("8rr" "```{r}\n@@\n```")
 ("8ra" "&rarr;")

 ("8eq" "\\begin{equation}\n@@\n\\end{equation}")

 ("8n" "&nbsp;")

 ("8f" "(\\(x) @@)()")

 ("8nn" "::: notes\n\n@@\n\n:::")

 ("8cc" ":::::: {.columns}\n::: {.column}\n\n@@\n\n:::\n:::{.column}\n\n\n\n:::\n::::::")

 ("8R" "#+begin_src R\n@@\n#+end_src")

 ("8ä" "\\344")
 ("8Ä" "\\304")

 ("8ö" "\\366")
 ("8Ö" "\\326")

 ("8ü" "\\374")
 ("8Ü" "\\334")

 ("8sz" "\\337")

 ("8ref" "\\@ref(@@)")

))

;; stop asking whether to save newly added abbrev when quitting emacs
(setq save-abbrevs nil)

;; turn on abbrev mode globally
(setq-default abbrev-mode t)

;; https://stackoverflow.com/questions/15375759/how-to-control-cursor-placement-in-emacs-abbrev-expansion
(defadvice expand-abbrev (after my-expand-abbrev activate)
   ;; if there was an expansion
   (if ad-return-value
       ;; start idle timer to ensure insertion of abbrev activator
       ;; character (e.g. space) is finished
       (run-with-idle-timer 0 nil
                            (lambda ()
                              ;; if there is the string "@@" in the
                              ;; expansion then move cursor there and
                              ;; delete the string
                              (let ((cursor "@@"))
                                (if (search-backward cursor last-abbrev-location t)
                                    (delete-char (length cursor))))))))
 #+end_src

 #+RESULTS:
 : expand-abbrev

* mode-line                                                          :custom:
#+begin_src emacs-lisp
;; ;; show line-number in the mode line
;; (line-number-mode 1)
;;
;; ;; show column-number in the mode line
;; (column-number-mode 1)
;;
;; ;; show time (and date) in the mode line
;; ;; (setq display-time-day-and-date t)
;; (setq display-time-24hr-format t)
;; (display-time)

;; http://emacs-fu.blogspot.de/2011/08/customizing-mode-line.html
;; use setq-default to set it for /all/ modes
(setq-default mode-line-format
              (list

               ;; modified indicator
               '(:eval (when (buffer-modified-p)       (concat " ## ")))
               '(:eval (when (not (buffer-modified-p)) (concat "    ")))

               ;; buffer name
               (propertize "%b  " 'face 'mode-line-buffer-id)

               ;; line and column
               "%01l:%01c  "

               ;; relative position
               "%p  "

               ;; ;; relative position, size of file
               ;; "[%p/%I] "

               ;; the current major mode for the buffer.
               "%m  "

               ;; i want to see the 'pomodoro' status using (%M = global-mode-string)
               "%M"
               ))
#+end_src

* recentf                                                            :custom:
a timer setting for recentf-mode without notifications to echo-area
https://gist.github.com/masutaka/1325654 (idle timer)
https://lists.gnu.org/archive/html/help-gnu-emacs/2010-12/msg02019.html
#+begin_src emacs-lisp

(recentf-mode 1)
(setq recentf-max-saved-items 2000)
(setq recentf-exclude '(".recentf"))

(defvar mx-recentf-list-prev nil)

(defun mx-recentf-save-list ()
  (interactive)
  "If recentf-list and previous recentf-list is equal,
     do nothing. Else recent-save-list and try to hide 'Wrote' message"
  (unless (equal recentf-list mx-recentf-list-prev)
    (setq old-message (current-message))
    (recentf-save-list)
    (message old-message)
    (setq mx-recentf-list-prev recentf-list)))

(run-with-idle-timer 60 t 'mx-recentf-save-list)

#+end_src


* dired                                                              :custom:
#+begin_src emacs-lisp
;; windows style
(setq ls-lisp-verbosity nil)

;; order directories first
(setq ls-lisp-dirs-first t)

;; windows behaviour (error message in emacs-25.1)
;;(setq ls-lisp-emulation 'MS Windows)

;; no domain with login name
(setq ls-lisp-ignore-case t)

;; sort by extension
(setq dired-listing-switches "-alX")

;; backspace behaves like in Total Comander
(add-hook 'dired-mode-hook
          (lambda ()
            (local-set-key [backspace] 'dired-up-directory)))
#+end_src


* python                                                             :custom:
#+begin_src emacs-lisp
(defun mx-python-start ()
  (interactive)
  (if (not (member "*Python*" (mapcar (function buffer-name) (buffer-list))))
      (progn (call-interactively 'run-python))))
;; Start python if not started. Send region if selected, line if not selected (whole def if it is def)
;; http://www.reddit.com/r/emacs/comments/1h4hyw/selecting_regions_pythonel/
(defun mx-python-eval ()
  (interactive)
  (mx-python-start)
  (if (and transient-mark-mode mark-active)     ; Check if selection is present
      (python-shell-send-region (point) (mark)) ; If selected, send region
    ;; If not selected, do all the following
    (beginning-of-line)                         ; Move to the beginning of line
    (if (looking-at "def")                      ; Check if the first word is def (function def)
        (progn                                  ; If it is def
          (python-shell-send-defun ())          ; Send whole def
          (python-nav-end-of-defun)             ; Move to the end of def
          (python-nav-forward-statement)        ; Move to the next statement
          )
      ;; If it is not def, do all the following
      (python-shell-send-region (point-at-bol) (pos-eol))  ; Send the current line
      (python-nav-forward-statement)                            ; Move to the next statement
      )
    ;; Activate shell window, and switch back
    (progn
      (setq w-script (selected-window))         ; Remeber the script window
      (python-shell-switch-to-shell)            ; Switch to the shell
      (select-window w-script)                  ; Switch back to the script window
      )
    ))
;; Define hooks
(add-hook 'python-mode-hook             ; For Python script
          #'(lambda()
             (local-set-key (kbd "<S-return>") 'mx-python-eval)
             (local-set-key (kbd "<C-return>") 'mx-python-eval)))

(setq python-shell-completion-native-enable nil)
#+end_src

* electric-pair                                                      :custom:
close automatically brackets
http://prodissues.com/2016/10/electric-pair-mode-in-emacs.html
https://www.emacswiki.org/emacs/ElectricPair (for specific modes only)
#+begin_src emacs-lisp
(electric-pair-mode 1)
(setq electric-pair-pairs '(
                            (?\" . ?\")
                            (?\` . ?\`)
                            (?\( . ?\))
                            (?\{ . ?\})
                            (?\[ . ?\])
                            ))
#+end_src


* FIX ispell (for hunspell)                                          :custom:
Spellchecking with multiple languages
https://200ok.ch/posts/2020-08-22_setting_up_spell_checking_with_multiple_dictionaries.html
- FIX: "ispell-find-hunspell-dictionaries: Can’t find Hunspell dictionary with a .aff affix file"
#+begin_src emacs-lisp
;; ;; do not order not by the default of alphabetical ordering
;; (setq flyspell-sort-corrections nil)

;; ;; do not print messages for every word (major performance gain)
;; (setq flyspell-issue-message-flag nil)

;; (with-eval-after-load "ispell"
;;   ;; Configure `LANG`, otherwise ispell.el cannot find a 'default
;;   ;; dictionary' even though multiple dictionaries will be configured
;;   ;; in next line.
;;   (setenv "LANG" "en_US.UTF-8")
;;   (setq ispell-program-name (executable-find "hunspell"))
;;   ;; Configure German and two variants of English.
;;   (setq ispell-dictionary "de_DE_frami,en_GB,en_US")
;;   ;; ispell-set-spellchecker-params has to be called
;;   ;; before ispell-hunspell-add-multi-dic will work
;;   (ispell-set-spellchecker-params)
;;   (ispell-hunspell-add-multi-dic "de_DE_frami,en_GB,en_US")
;;   ;; For saving words to the personal dictionary, don't infer it from
;;   ;; the locale, otherwise it would save to ~/.hunspell_de_DE.
;;   (setq ispell-personal-dictionary "~/.hunspell_personal"))

;; ;; The personal dictionary file has to exist, otherwise hunspell will
;; ;; silently not use it.
;; ;; (unless (file-exists-p ispell-personal-dictionary)
;; ;;   (write-region "" nil ispell-personal-dictionary nil 0))
#+end_src

* xah-find                                                             :lisp:
- http://ergoemacs.org/emacs/elisp-xah-find-text.html
- reposository: https://github.com/maxmagmilch/xah-find
#+begin_src emacs-lisp
(load "~/.emacs.d/lisp/xah-find.el")
#+end_src

* rainbow-mode                                                         :lisp:
minor mode sets background color to strings that match color names, e.g. #0000ff is displayed in white with a blue background
#+begin_src emacs-lisp
(load "~/.emacs.d/lisp/rainbow-mode.el")

(add-hook 'ess-mode-hook 'rainbow-mode)

(add-hook 'emacs-lisp-mode-hook 'rainbow-mode)
#+end_src

* dracula-theme                                                        :lisp:
#+begin_src emacs-lisp
(load "~/.emacs.d/lisp/dracula-theme.el")

;; Don't change the font size for some headings and titles (default t)
(setq dracula-enlarge-headings nil)

(when (string-equal mx-use-theme "dracula")
  (setq org-todo-keyword-faces
        '(("PROJ"  . (:inherit org-todo))
          ("WAITING"  . (:inherit org-todo))))
  (load-theme 'dracula t))
#+end_src

* use-package                                                    :usepackage:
Set up ~package~ and ~use-package~.
#+begin_src emacs-lisp
(require 'package)
(setq package-check-signature nil)
(add-to-list 'package-archives
             '("melpa" . "https://melpa.org/packages/") t)
(package-initialize)

;; Bootstrap 'use-package'
(eval-after-load 'gnutls
  '(add-to-list 'gnutls-trustfiles "/etc/ssl/cert.pem"))
(unless (package-installed-p 'use-package)
  (package-refresh-contents)
  (package-install 'use-package))
(eval-when-compile
  (require 'use-package))
(require 'bind-key)
(setq use-package-always-ensure t)
#+end_src



* ivy                                                            :usepackage:
- http://oremacs.com/swiper/
- https://sam217pa.github.io/2016/09/13/from-helm-to-ivy/
#+begin_src emacs-lisp
(use-package ivy
  :ensure t
  ;; :custom-face
    ;; (ivy-current-match ((t :background "#FFE8FF" :foreground "#670034" :weight bold)))
    ;; (ivy-virtual ((t :foreground #7F7F7F)))
    ;; (ivy-minibuffer-match-face-2 ((t :background "#dddddd" :weight bold)))
  :config
  (ivy-mode 1)
  (setq ivy-display-style ' fancy) ; 'fancy ' plain nil
  ;; use recentf and bookmark files
  (setq ivy-use-virtual-buffers t)
  ;; no "^" for counsel-M-x etc.
  (setq ivy-initial-inputs-alist nil)
  ;; No extra directories "./" and "../" in find-file
  (setq ivy-extra-directories '("./"))
  ;; ;; Always ignore buffers set in `ivy-ignore-buffers'
  ;; (setq ivy-use-ignore-default 'always)
  ;; ;; Ignore some buffers in `ivy-switch-buffer'
  ;; (setq ivy-ignore-buffers mx-skippable-buffers)
  ;; custom faces for ivy-switch-buffer
  ;; M-x list-faces-display
  ;; (setq ivy-switch-buffer-faces-alist
  ;;       '((dired-mode . ivy-subdir)
  ;;         (org-mode . ivy-org)))
  ;; minibuffer
  (bind-key "C-SPC" 'ivy-restrict-to-matches ivy-minibuffer-map)
  ;; minibuffer - scrolling - up
  (bind-key "<next>" 'ivy-scroll-up-command ivy-minibuffer-map)
  (bind-key "<right>" 'ivy-scroll-up-command ivy-minibuffer-map)
    ;; minibuffer - scrolling - down
  (bind-key "<prior>" 'ivy-scroll-down-command ivy-minibuffer-map)
  (bind-key "<left>" 'ivy-scroll-down-command ivy-minibuffer-map)
  (bind-key "C-m" 'ivy-alt-done ivy-minibuffer-map)
  (setq ivy-count-format "(%d/%d) ")
  ;; allow input not in order while searching
  (setq ivy-re-builders-alist '((t . ivy--regex-ignore-order))))
#+end_src

* counsel (for ivy)                                              :usepackage:
https://oremacs.com/swiper/
#+begin_src emacs-lisp

;; dont truncate lines in minibuffer
;; to fully see long file names with counsel-find-file
(add-hook 'minibuffer-setup-hook
      (lambda () (setq truncate-lines nil)))

(use-package counsel
  :ensure t
  :config
  ;; ignore . files or temporary files
  (setq counsel-find-file-ignore-regexp
        (concat
         ;; File names beginning with # or .
         "\\(?:\\`[#.]\\)"
         ;; File names ending with # or ~
         "\\|\\(?:\\`.+?[#~]\\'\\)"
         ;; File names ending with .aux
         "\\|\\.aux\\'"))
  :bind
  ("C-f" . swiper) ; swiper-isearch
  ("<f2>" . ivy-resume)
  ("M-y" . counsel-yank-pop)
  ("M-x" . counsel-M-x)
  ;;("C-b" . counsel-buffer-or-recentf)
  ("C-x C-f" . counsel-find-file)
  ("C-x C-r" . counsel-recentf) ;; counsel-buffer-or-recentf
  ("<f1> v" . counsel-describe-variable)
  ("<f1> f" . counsel-describe-function)
  ("<f1> k" . counsel-descbinds))
#+end_src

* swiper (for ivy)                                               :usepackage:
https://oremacs.com/swiper/
#+begin_src emacs-lisp
(use-package swiper
  :ensure t)
#+end_src

* smex (for ivy)                                                 :usepackage:
- enable history for M-x commands
#+begin_src emacs-lisp
(use-package smex
  :ensure t)
#+end_src

* multiple-cursors                                               :usepackage:
#+begin_src emacs-lisp
(use-package multiple-cursors
  :ensure t
  :bind
  ("C-<" . mc/mark-next-like-this)
  ("C->" . mc/unmark-next-like-this)
  ("C-c C-<" . mc/mark-all-like-this)
  ("M-n" . mc/insert-numbers))
#+end_src


* htmlize                                                        :usepackage:
#+begin_src emacs-lisp
(use-package htmlize
  :ensure t)
#+end_src

* hl-todo                                                        :usepackage:
- https://github.com/tarsius/hl-todo/tree/42f744ffb513cf2b95517144c64dbf3fc69f711a
- Highlight TODO and similar keywords in comments and strings
#+begin_src emacs-lisp
(use-package hl-todo
       :ensure t
       :custom-face
       (hl-todo ((t (:inherit hl-todo :italic t))))
       :hook ((prog-mode . hl-todo-mode)
              (yaml-mode . hl-todo-mode))
       :init
       (setq hl-todo-keyword-faces '(
               ("TODO"   . (:weight bold :foreground "#FF0000"))
               ("FIXME"  . (:weight bold :foreground "#FF0000"))
               ("DEBUG"  . (:weight bold :foreground "#A020F0"))
               ))
       :config
       (define-key hl-todo-mode-map (kbd "C-c p") 'hl-todo-previous)
       (define-key hl-todo-mode-map (kbd "C-c n") 'hl-todo-next)
       (define-key hl-todo-mode-map (kbd "C-c o") 'hl-todo-occur)
       (define-key hl-todo-mode-map (kbd "C-c i") 'hl-todo-insert))
#+end_src

* leuven-theme                                                   :usepackage:
#+begin_src emacs-lisp
(use-package leuven-theme
  :if (string-equal mx-use-theme "leuven")
  :ensure t
  ;;:disabled t
  :init
  (setq leuven-scale-outline-headlines nil)
  (setq leuven-scale-org-agenda-structure 1.2)
  (setq org-fontify-whole-heading-line t)
  (setq org-todo-keyword-faces
        '(("PROJ"  . (:weight bold :box (:line-width 1 :color "#C8ABD8") :foreground "#C8ABD8" :background "#E0E0F9"))
          ("WAITING"  . (:weight bold :box (:line-width 1 :color "#BFBF65") :foreground "#BFBF65" :background "#FFFFCC"))
          ("NEXT"  . (:weight bold :box (:line-width 1 :color "#8ea1b2") :foreground "#8ea1b2" :background "#CCE7FF"))
          ("SOMEDAY"  . (:weight bold :box (:line-width 1 :color "#a8c2a8") :foreground "#a8c2a8" :background nil))))
  :custom-face
  (font-latex-sectioning-0-face ((t (:height 1.5))))
  (font-latex-sectioning-1-face ((t (:height 1.4))))
  (org-document-title ((t (:height 1.4))))
  (mode-line-buffer-id  ((t (:weight normal))))
  (secondary-selection ((t (:background unspecified))))
  (font-lock-comment-face ((t (:slant normal))))
  (org-tag ((t (:slant normal))))
  (org-level-6 ((t (:slant normal))))
  (org-level-7 ((t (:slant normal))))
  (org-level-8 ((t (:slant normal))))
  :config
  (load-theme 'leuven t))
#+end_src

* auctex                                                         :usepackage:
#+begin_src emacs-lisp
(use-package tex
  :ensure auctex
  :defer t
  :init
  ;; use PDF-LaTeX
  (setq TeX-PDF-mode t)
  (setq latex-run-command "pdflatex")
  ;; multifiles - query for master file.
  (setq-default TeX-master nil)
  ;; add custom created LaTeX commands
  (setq font-latex-match-reference-keywords
        '(("todo" "[{") ("discuss" "[{"))))
#+end_src

* ace-jump-mode                                                  :usepackage:
#+begin_src emacs-lisp
(use-package ace-jump-mode
  :ensure t
  :bind
  ("M-SPC" . ace-jump-mode)
  (:map org-mode-map
       ("M-SPC" . ace-jump-mode))
  (:map inferior-ess-mode-map
       ("M-SPC" . ace-jump-mode))
  )
#+end_src

* ace-window                                                     :usepackage:
#+begin_src emacs-lisp
(use-package ace-window
  :ensure t
  :bind ("M-o" . ace-window)
  :init
  (setq aw-keys '(?a ?s ?d ?f ?g ?h ?j ?k ?l)))
#+end_src


* move-text                                                      :usepackage:
#+begin_src emacs-lisp
(use-package move-text
  :ensure t
  :init (move-text-default-bindings))
#+end_src

* rainbow-delimiters                                             :usepackage:
https://github.com/Fanael/rainbow-delimiters
#+begin_src emacs-lisp
(use-package rainbow-delimiters
  :ensure t
  :init
  (add-hook 'tex-mode-hook #'rainbow-delimiters-mode)
  (add-hook 'LaTeX-mode-hook #'rainbow-delimiters-mode)
  (add-hook 'ess-mode-hook #'rainbow-delimiters-mode)
  (add-hook 'inferior-ess-mode-hook #'rainbow-delimiters-mode)
  (add-hook 'python-mode-hook #'rainbow-delimiters-mode)
  (add-hook 'emacs-lisp-mode-hook #'rainbow-delimiters-mode))
#+end_src

* goto-change                                                    :usepackage:
#+begin_src emacs-lisp
(use-package goto-chg
  :ensure t
  :bind
  ("M-," . goto-last-change)
  ("M-." . goto-last-change-reverse))
#+end_src

* ledger-mode                                                    :usepackage:
#+begin_src emacs-lisp
(use-package ledger-mode
  :ensure t
  :defer t
  :init
  (autoload 'ledger-mode "ledger-mode" "A major mode for Ledger" t)
  (add-to-list 'auto-mode-alist '("\\.ledger$" . ledger-mode)))
#+end_src

* FIX org-ql                                                     :usepackage:
- find to make use of it
#+begin_src emacs-lisp
(use-package org-ql
  :ensure t)
#+end_src

* org-pomodoro                                                   :usepackage:
#+begin_src emacs-lisp
(use-package org-pomodoro
  :ensure t
  :bind
  ("<f4>" . org-pomodoro)
  :init
  (add-hook 'org-pomodoro-finished-hook 'ding)
  (add-hook 'org-pomodoro-break-finished-hook 'ding)
  :config
  (setq org-pomodoro-format "W%s")
  (setq org-pomodoro-short-break-format "B%s")
  (setq org-pomodoro-long-break-format "LB%s")
  (setq org-pomodoro-time-format "%.2m")
  (setq org-pomodoro-keep-killed-pomodoro-time t))
#+end_src

* emacs speaks statistics                                        :usepackage:
http://ess.r-project.org/Manual/ess.html
c:\Program Files\R\R-4.1.0\library\base\R\Rprofile
add: .libPaths("D:/Daten/R/Library")
** custom functions
#+begin_src emacs-lisp
(defun R_insert_pipe_operator ()
  "R - |> operator or 'then' pipe operator"
  (interactive)
  (just-one-space 1)
  (insert "|>")
  (just-one-space 1))
  ;;(reindent-then-newline-and-indent))

(defun R_eval_current_line_and_step ()
  "cause Shift+Enter to send the current line to *R*"
  (interactive)
  (if (and transient-mark-mode mark-active)
      (call-interactively 'ess-eval-region)
    (call-interactively 'ess-eval-line-and-step)))

(defun R_tar_load_target_at_point ()
  "call targets::tar_load on object at point to load it into environment."
  (interactive)
  (let ((target (symbol-at-point)))
    (ess-eval-linewise (format "targets::tar_load(%s)\n" target))))

(defun R_tar_read_target_at_point ()
  "call targets::tar_read on object at point to load it into environment."
  (interactive)
  (let ((target (symbol-at-point)))
    (ess-eval-linewise (format "targets::tar_read(%s)\n" target))))

(defun R_tar_make ()
  "call targets::tar_make."
  (interactive)
    (ess-eval-linewise "targets::tar_make(reporter = \"verbose_positives\")\n"))

(defun R_bookdown_render_book ()
  "call bookdown::render_book."
  (interactive)
    (ess-eval-linewise "bookdown::render_book(\"index.Rmd\")\n"))

(defun R_tar_make_summary ()
  "call targets::tar_make(reporter = \"summary\")."
  (interactive)
    (ess-eval-linewise "Sys.time(); targets::tar_make(reporter = \"summary\", shortcut = TRUE)\n"))

(defun R_tar_visnetwork ()
  "call targets::tar_visnetwork."
  (interactive)
    (ess-eval-linewise "targets::tar_visnetwork()\n"))

(defun R_tar_visnetwork_targets_only ()
  "call targets::tar_visnetwork(targets_only = TRUE)."
  (interactive)
    (ess-eval-linewise "targets::tar_visnetwork(targets_only = TRUE)\n"))

;; fnmate (create R/function.R for written function())

;; https://github.com/MilesMcBain/fnmate/blob/master/vignettes/ess_bindings.Rmd
(defun text-around-cursor (&optional rows-around)
  (let ((rows-around (or rows-around 10))
  (current-line (line-number-at-pos))
  (initial-point (point)))
    (save-mark-and-excursion
      (goto-line (- current-line rows-around))
      (set-mark (point))
      (goto-line (+ current-line rows-around))
      (end-of-line)
      ;; Return a list of text, index
      (list (buffer-substring-no-properties (mark) (point))
            (+ (- initial-point (mark)) 1)))))

(defun strip-ess-output-junk (r-buffer)
  (with-current-buffer r-buffer
    (goto-char (point-min))
    (while (re-search-forward "\\+\s" nil t)
      (replace-match ""))))

(defun exec-r-fn-to-buffer (r_fn text)
  (let ((r-process (ess-get-process))
        (r-output-buffer (get-buffer-create "*R-output*")))
    (ess-string-command
     (format "cat(%s(%s))\n" r_fn text)
     r-output-buffer nil)
    (strip-ess-output-junk r-output-buffer)
    (save-mark-and-excursion
      (goto-char (point-max))
      (newline)
      (insert-buffer r-output-buffer))))

;; fnmate functions for keybindings
 (defun fnmate ()
   (interactive)
   (let* ((input-context (text-around-cursor))
          (text (prin1-to-string (car input-context)))
          (index (cdr input-context)))
     (ess-eval-linewise (format "fnmate::fnmate_fn.R(%s, %s)" text index))))

(defun fnmate-below ()
  (interactive)
  (let* ((input-context (text-around-cursor))
         (text (prin1-to-string (car input-context)))
         (index (cdr input-context))
         (args (format "%s, %s" text index)))
    (exec-r-fn-to-buffer "fnmate::fnmate_below" args)))
#+end_src

** custom keywords and highlights
- highlight custom keywords for {targets} package
#+begin_src emacs-lisp
(defvar ess-R-keywords
  '("if" "else" "repeat" "while" "function" "for" "in" "next" "break"
    "switch" "function" "return" "on.exit" "stop" ".Defunct" "tryCatch"
    "withRestarts" "invokeRestart"
    "recover" "browser"
    "tar_target" "tar_render" "tar_file")
  "Reserved words or special functions in the R language.")

;; https://stackoverflow.com/a/67654699
;; highlight along with current assignment ops
;; ess-R-font-lock-keywords contains (ess-R-fl-assign-ops . t) by default
(with-eval-after-load 'ess
  (cl-pushnew "|>" ess-R-assign-ops :test 'string=))

;; https://www.emacswiki.org/emacs/AddKeywords
;; (font-lock-add-keywords 'ess-mode
;;   '(("tar_target" . font-lock-function-name-face)
;;     ("tar_render" . font-lock-function-name-face)
;;     ("tar_file" . font-lock-function-name-face)))
#+end_src

** settings
#+begin_src emacs-lisp
(use-package ess
  :ensure t
  :commands R
  :init
  (require 'ess-site)
  (add-hook 'ess-mode-hook #'(lambda ()
                              (local-set-key [(shift return)] 'R_eval_current_line_and_step)))
  :bind
  (:map inferior-ess-mode-map
        (";" .   ess-insert-assign)
        ("M--" . ess-insert-assign)
        ("<backtab>" . R_insert_pipe_operator))
  (:map ess-mode-map
        (";" .   ess-insert-assign)
        ("M--" . ess-insert-assign)
        ("<f7>" . ess-eval-paragraph-and-step)
        ("<backtab>" . R_insert_pipe_operator)
        ("C-c C-l" . R_tar_load_target_at_point))
  :config
  (setq ess-auto-width 'window)
  ;; no visible history on eval
  (setq ess-eval-visibly nil)
  ;; disable flymake on-the-fly syntax checking
  (setq ess-use-flymake nil)
  ;; start R in current working directory and no history
  (setq ess-ask-for-ess-directory nil)
  (setq ess-local-process-name "R")
  (setq ess-history-file nil)
  ;; only one help frame
  (setq ess-help-own-frame 'one)
  ;; on input/output show the bottom line
  (setq comint-scroll-to-bottom-on-input t)
  (setq comint-scroll-to-bottom-on-output t)
  (setq comint-move-point-for-output t)
  ;; identation
  ;;(set 'ess-arg-function-offset t)
  ;; 't', hitting TAB always just indents the current line.
  ;; If complete, TAB first tries to indent the current line, and if the line
  ;; was already indented, then try to complete the thing at point.
  (setq tab-always-indent 'complete)
  (setq ess-style 'RStudio)
  (setq ess-indent-with-fancy-comments nil)
  ;;;; Dedicated windows(frames)?
  ;;;; https://ess.r-project.org/Manual/ess.html#Controlling-buffer-display
  ;; (setq display-buffer-alist
  ;;    '(("^\\*R"
  ;;       (display-buffer-reuse-window display-buffer-pop-up-frame)
  ;;       (reusable-frames . 0))))
  )
#+end_src

* yaml-mode                                                      :usepackage:
#+begin_src emacs-lisp
(use-package yaml-mode
  :ensure t
  :init
  (add-to-list 'auto-mode-alist '("\\.yml\\'" . yaml-mode)))
#+end_src

* DISABLED magit                                                 :usepackage:
#+begin_src emacs-lisp
(use-package magit
  ;;:ensure t
  :disabled t
  ;;:config
  ;;;; update mode-line git status more often
  ;;(setq auto-revert-check-vc-info t)
  ;;;; check every 5 seconds
  ;;(setq auto-revert-interval 5)
  )
#+end_src

* transient (transient keybinds)                                 :usepackage:
comes with magit
Manuak:
- https://github.com/magit/transient/blob/master/docs/transient.org
Examples:
- https://www.reddit.com/r/emacs/comments/mx6xs2/transient_vs_hydra/
- https://www.reddit.com/r/emacs/comments/pn4on3/using_transients_as_custom_menus/
- https://www.reddit.com/r/emacs/comments/m518xh/transient_api_example_alternative_bindings_part_1/
- https://www.reddit.com/r/emacs/comments/pon0ee/transient_api_example_part_2_transientdostay/
- transient kubernetes
  - https://www.youtube.com/watch?v=w3krYEeqnyk
  - https://gist.github.com/abrochard/dd610fc4673593b7cbce7a0176d897de
#+begin_src emacs-lisp
(global-set-key (kbd "<f1>") 'mx-main-transient)
(global-set-key (kbd "<apps>") 'mx-main-transient)

(transient-define-prefix mx-main-transient ()
  "Main"

  [["Org"
   ("oa" "agenda" org-agenda)
   ("oh" "home.org" mx-org-file-home)
   ("oi" "work.org" mx-org-file-work)]

   ["Files"
    ("ff" "find" counsel-git)
    ("fd" "dired" counsel-find-file)
    ("fr" "recentf" counsel-buffer-or-recentf)
    ("fb" "bookmark" counsel-bookmark)]

   ["Buffer"
    ("bk" "kill" mx-kill-buffer)
    ("bs" "save" save-buffer)
    ("bl" "list" list-buffers)]

   ["Window"
    ("wk" "kill" delete-frame)
    ("ww" "new" make-frame)]

   ["Describe"
    ("dk" "keybind" counsel-descbinds)
    ("df" "function" counsel-describe-function)
    ("dv" "variable" counsel-describe-variable)]]

  ;; [["Git"
  ;;   ("g" "magit" magit-status)]

  [["{targets} run"
    ("tm" "make" R_tar_make)
    ("tM" "make summary" R_tar_make_summary)
    ("tv" "visnetwork" R_tar_visnetwork_targets_only)
    ("tV" "visnetwork complete" R_tar_visnetwork)]

   ["{targets} objects"
    ("tt" "load at point" R_tar_load_target_at_point)
    ("tr" "read at point" R_tar_read_target_at_point)
    ("tf" "fnmate at point" fnmate)]

   ["{Rmarkdown}"
    ("e" "polymode export" mx-polymode-export)
    ("r" "render book" R_bookdown_render_book)]]

  [" "
   ("<f1>" "quit" transient-quit-one)
   ("<apps>" "quit" transient-quit-one)]
)
#+end_src

* polymode (Rmarkdown/Quarto)                                    :usepackage:
- Pandoc (https://pandoc.org/)
- Quarto (https://github.com/quarto-dev/quarto-emacs)

#+begin_src emacs-lisp
(use-package request
  :ensure t)

(use-package quarto-mode
  :ensure t
  :mode (("\\.qmd" . poly-quarto-mode)))

(use-package markdown-mode
  :ensure t
  :init
  (setq markdown-enable-math nil) ;; nil t
  :custom-face
  (markdown-italic-face ((t (:slant normal)))))

(add-hook 'markdown-mode-hook
          (lambda ()
            ;; latex commands: \some
            (font-lock-add-keywords nil '(("\\\\[[:alnum:]]+" . font-lock-type-face)))
            ;; inline math: $...$
            (font-lock-add-keywords nil '(("\\$\\(.+?\\)\\$" . font-lock-type-face)))
            ;; diyplay math: $$
            (font-lock-add-keywords nil '(("^\\$\\$\n" . font-lock-type-face)))
            ;; citations: [@...]
            (font-lock-add-keywords nil '(("\\[\\(\\@.+?\\)\\]" . font-lock-builtin-face)))
            ;; references: \@ref()
            (font-lock-add-keywords nil '(("\\\\\\@ref\\((.+?)\\)" . font-lock-builtin-face)))
            ;; references: \ref{}
            (font-lock-add-keywords nil '(("\\\\\\ref\\({.+?}\\)" . font-lock-builtin-face)))
            ;; custom latex command: \todo
            (font-lock-add-keywords nil '(("\\\\todo" . font-lock-warning-face)))
            ;; custom latex command: \discuss
            (font-lock-add-keywords nil '(("\\\\discuss" . font-lock-warning-face)))
            ))

(use-package poly-markdown
  :ensure t)

(use-package poly-R
  :ensure t)

(use-package polymode
  :ensure t
  :init
  (require 'poly-R)
  (require 'poly-markdown)
  :config
  (add-to-list 'auto-mode-alist '("\\.md$" . poly-gfm-mode))
  (add-to-list 'auto-mode-alist '("\\.Rmd$" . poly-markdown+r-mode))
  ;;(add-to-list 'auto-mode-alist '("\\.Rmd$" . poly-gfm+r-mode))
  (setq polymode-display-output-file nil)
  (setq polymode-display-process-buffers nil)
  (setq markdown-max-image-size (cons 600  nil)))

(defun mx-polymode-export ()
 "Delete process-buffer window after polymode-export"
 (interactive)
 (polymode-export)
 (delete-other-windows))
#+end_src

* symbol-overlay                                                 :usepackage:
makes M-n and M-p look for and M-h highlight the symbol at point
#+begin_src emacs-lisp
(use-package symbol-overlay
  :ensure t
  :bind (:map symbol-overlay-mode-map
              ("M-h" . symbol-overlay-put)
              ("M-n" . symbol-overlay-jump-next)
              ("M-p" . symbol-overlay-jump-prev))
  :hook ((conf-mode . symbol-overlay-mode)
         (html-mode . symbol-overlay-mode)
         (prog-mode . symbol-overlay-mode)
         (yaml-mode . symbol-overlay-mode))
  :custom-face
  ;; no highlighting
  (symbol-overlay-default-face ((t (:inherit nil))))
  (symbol-overlay-face-1 ((t (:background "turquoise"))))
  (symbol-overlay-face-8 ((t (:background "dodger blue")))))
#+end_src
.
