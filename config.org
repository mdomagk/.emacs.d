#+TAGS: custom(c) usepackage(u) keybind(k)
#+SEQ_TODO: TODO(t) FIX(f) DISABLED(i) | DONE(d)
#+TITLE: config.org
#+Changed: 16.11.2021

* Literate Emacs config
** [0/4] Tasks
- [ ] Rerrange structure
- [ ] Add tags ~keybind~
- [ ] Clean unused packages
- [ ] Fix fnmate Bug

** Installation
Add ~site-start.el~ in ~c:\Program Files\GNU Emacs\emacs_27.2\share\emacs\27.2\site-lisp\~ and add:
#+begin_src lisp
(setenv "HOME" "D:/Privat/Nextcloud")
#+end_src
to set path to ~.emacs.d/~ folder.

* use-package                                                           :custom:
Set up ~package~ and ~use-package~.
#+begin_src emacs-lisp
(require 'package)
(setq package-check-signature nil)
(add-to-list 'package-archives
             '("melpa" . "https://melpa.org/packages/") t)
(package-initialize)

;; Bootstrap 'use-package'
(eval-after-load 'gnutls
  '(add-to-list 'gnutls-trustfiles "/etc/ssl/cert.pem"))
(unless (package-installed-p 'use-package)
  (package-refresh-contents)
  (package-install 'use-package))
(eval-when-compile
  (require 'use-package))
(require 'bind-key)
(setq use-package-always-ensure t)
#+end_src

* custom.el                                                             :custom:
Set a ~custom-file~ so Emacs leaves my init file alone.
#+begin_src emacs-lisp
(setq custom-file (expand-file-name "custom.el" user-emacs-directory))
#+end_src

* debugging                                                             :custom:
#+begin_src emacs-lisp
(setq debug-on-error nil) ;; t nil
#+end_src

* environment                                                           :custom:
M-x getenv <RET> PATH <RET>
** IEEH (Win10) EVMI60
#+begin_src emacs-lisp
(when (string-equal system-name "EVMI60")
  (let ((mypaths
         '("C:/Program Files/R/R-4.1.1/bin/x64"
           "D:/Privat/Ledger"
           "D:/Users/domagk/AppData/Local/Pandoc"
           "C:/tools/texlive/2017/bin/win32"
           "C:/rtools40"
           "C:/rtools40/mingw64/bin"
           "C:/Program Files/git/bin"
           "C:/Program Files/Graphviz/bin"
           "C:/Program Files (x86)/gnupg14"
           "C:/Python39")))
    (setenv "PATH" (mapconcat 'identity mypaths ";"))
    (setq exec-path (append mypaths (list "." exec-directory)))
    (setq user-mail-adress "max.domagk@tu-dresden.de")
  )
)
#+end_src

** HOME (Win10) LAPTOP-ULMJC9IQ
#+begin_src emacs-lisp
(when (string-equal system-name "LAPTOP-ULMJC9IQ")
  (let ((mypaths
         '("D:/Max/Ledger_312"
           "D:/Max/sqlite3"
           "C:/texlive/2020/bin/win32"
           "C:/Users/Max/AppData/Local/Pandoc"
           "C:/Program Files/R/R-4.1.1/bin/x64"
           "C:/Program Files/git/bin"
           "C:/Program Files/Graphviz/bin"
           "C:/Program Files (x86)/GNU GnuPG")))
    (setenv "PATH" (mapconcat 'identity mypaths ";"))
    (setq exec-path (append mypaths (list "." exec-directory)))
    (setq user-mail-adress "mdomagk@posteo.de")
  )
)
#+end_src

* personal settings                                                     :custom:
#+begin_src emacs-lisp
(setq user-full-name "Max Domagk")

;; additionl options KEEP-SIZE and FRAMES
(set-frame-font "Consolas-9" nil t)

(add-to-list 'default-frame-alist '(width . 84))
#+end_src

* TODO global settings                                                  :custom:
** TODO no lockfiles (nextcloud .#* not working)
- fix .sync-exclude.lst from Nextcloud
#+begin_src emacs-lisp
(setq create-lockfiles nil)
#+end_src

** remove auto-window-scroll (high CPU usage)
https://emacs.stackexchange.com/questions/28736/emacs-pointcursor-movement-lag/28746
#+begin_src emacs-lisp
(setq auto-window-vscroll nil)
#+end_src

** turn off mouse interface
#+begin_src emacs-lisp
(if (fboundp 'menu-bar-mode) (menu-bar-mode -1))
(if (fboundp 'tool-bar-mode) (tool-bar-mode -1))
(if (fboundp 'scroll-bar-mode) (scroll-bar-mode -1))
#+end_src

** set major-mode to text
#+begin_src emacs-lisp
(setq-default major-mode 'text-mode)
#+end_src

** disable default splash screen
#+begin_src emacs-lisp
(setq inhibit-startup-message t)
#+end_src

** disable startup message in scratch buffer
#+begin_src emacs-lisp
(setq-default initial-scratch-message nil)
#+end_src

** no alarm sound, only visible (t), not visible (nil)
#+begin_src emacs-lisp
(setq visible-bell t)
#+end_src

** enable winner mode C-c <left> to get to the previous window configuration
#+begin_src emacs-lisp
(winner-mode 1)
#+end_src

** show unfinished keystrokes early
#+begin_src emacs-lisp
(setq echo-keystrokes 0.1)
#+end_src

** blinking cursor: 1 (on) / 0 (off)
#+begin_src emacs-lisp
(blink-cursor-mode 1)
#+end_src

** highligh current line:  1 (on) / 0 (off)
#+begin_src emacs-lisp
(global-hl-line-mode 0)
#+end_src

** enable Common User Access mode
#+begin_src emacs-lisp
;; windows-like behaviour to cut, copy & paste with ctrl + x, c & v
;; (setq cua-highlight-region-shift-only t) ;; no transient mark mode
;; (setq cua-toggle-set-mark nil) ;; original set-mark behavior, i.e. no transient-mark-mode
(cua-mode)
#+end_src

** syntax highlighting
#+begin_src emacs-lisp
(global-font-lock-mode t)
#+end_src

** sane select (mark) mode
#+begin_src emacs-lisp
(transient-mark-mode 1)
#+end_src

** entry deletes marked text
#+begin_src emacs-lisp
(delete-selection-mode t)
#+end_src

** match parentheses
#+begin_src emacs-lisp
(show-paren-mode t)
;;(setq show-paren-style 'expression)
;;(setq show-paren-when-point-in-periphery t)
;;(setq show-paren-when-point-inside-paren nil)
#+end_src

** instead of yes or no accept y or n
#+begin_src emacs-lisp
(fset 'yes-or-no-p 'y-or-n-p)
#+end_src

** make sure all backup files only live in one place
#+begin_src emacs-lisp
(defvar my-backup-folder (concat "~/.emacs.d/backups" "/"))

(setq backup-directory-alist `((".*" . ,my-backup-folder))
      backup-by-copying t    ; Don't delink hardlinks
      version-control t      ; Use version numbers on backups
      delete-old-versions t  ; Automatically delete excess backups
      kept-new-versions 20   ; how many of the newest versions to keep
      kept-old-versions 5    ; and how many of the old
      )
#+end_src

** disable auto-save / set auto-save directory
#+begin_src emacs-lisp
;;(setq auto-save-default nil) ; just turn off

;; move to one directory
(setq auto-save-file-name-transforms `((".*" "~/.emacs.d/auto-save/" t)))
#+end_src

** visual line mode and toggle to truncate my lines
#+begin_src emacs-lisp
(global-visual-line-mode 1)
;; enable line wrap
(setq default-truncate-lines t)
;; make side by side buffers function the same as the main window
(setq truncate-partial-width-windows nil)
;; Add F12 to toggle line wrap
(global-set-key (kbd "<f8>") 'toggle-truncate-lines)

;;(setq-default truncate-lines nil)
#+end_src

** explicitly show the end of a buffer
#+begin_src emacs-lisp
(set-default 'indicate-empty-lines t)
#+end_src

** trailing whitespace is unnecessary
#+begin_src emacs-lisp
(add-hook 'before-save-hook (lambda () (delete-trailing-whitespace)))
#+end_src

** trash can support
#+begin_src emacs-lisp
(setq delete-by-moving-to-trash t)
#+end_src

* functions                                                             :custom:
** It's simple. Bury the scratch buffer
#+begin_src emacs-lisp
(setq my-never-kill-buffers '("*scratch*" "*Messages*"))

(defun my-kill-buffer (buffer)
  "Protect some special buffers from getting killed."
  (interactive (list (current-buffer)))
  (if (member (buffer-name buffer) my-never-kill-buffers)
      (call-interactively 'bury-buffer buffer)
    (kill-buffer buffer)))
#+end_src

** kill-this-buffer-and-window
#+begin_src emacs-lisp
(defun kill-this-buffer-and-window ()
  "Kill the current buffer and delete the selected window."
  (interactive)
  (let (buffer current-buffer)
    (if (kill-buffer (current-buffer))
        (if (> (count-windows) 50) ; reduzieren der fenster (unnoetig)
            (delete-window (selected-window))))))
#+end_src

** ask-before-closing
#+begin_src emacs-lisp
(defun ask-before-closing ()
  "Ask whether or not to close, and then close if y was pressed"
  (interactive)
  (if (yes-or-no-p (format "<<< close EMACS ???  >>>  "))
      (if (< emacs-major-version 22)
          (save-buffers-kill-terminal)
        (save-buffers-kill-emacs))))
#+end_src

** rotate-windows
#+begin_src emacs-lisp
(defun rotate-windows ()
  "Rotate your windows"
  (interactive)
  (cond ((not (> (count-windows)1))
         (message "You can't rotate a single window!"))
        (t
         (setq i 1)
         (setq numWindows (count-windows))
         (while  (< i numWindows)
           (let* (
                  (w1 (elt (window-list) i))
                  (w2 (elt (window-list) (+ (% i numWindows) 1)))

                  (b1 (window-buffer w1))
                  (b2 (window-buffer w2))

                  (s1 (window-start w1))
                  (s2 (window-start w2))
                  )
             (set-window-buffer w1  b2)
             (set-window-buffer w2 b1)
             (set-window-start w1 s2)
             (set-window-start w2 s1)
             (setq i (1+ i)))))))
#+end_src

** define aliases for faster M-x
#+begin_src emacs-lisp
(defalias 'qrr 'query-replace-regexp)
(defalias 'lml 'list-matching-lines)
(defalias 'dml 'delete-matching-lines)
(defalias 'dnml 'delete-non-matching-lines)
(defalias 'sl 'sort-lines)
#+end_src

** Move cursor to brackets
#+begin_src emacs-lisp
(defvar xah-brackets nil "string of left/right brackets pairs.")
(setq xah-brackets "()[]{}<>（）［］｛｝⦅⦆〚〛“”‘’‹›«»「」〈〉《》【】〔〕『』〖〗〘〙｢｣❛❜❝❞⁽⁾₍₎")

(defvar xah-left-brackets '("(" "{" "[" "<" "〔" "【" "〖" "〈" "《" "「" "『" "“" "‘" "‹" "«" )
  "List of left bracket chars.")
(progn
  ;; make xah-left-brackets based on xah-brackets
  (setq xah-left-brackets '())
  (dotimes ($x (- (length xah-brackets) 1))
    (when (= (% $x 2) 0)
      (push (char-to-string (elt xah-brackets $x))
            xah-left-brackets)))
  (setq xah-left-brackets (reverse xah-left-brackets)))

(defvar xah-right-brackets '(")" "]" "}" ">" "〕" "】" "〗" "〉" "》" "」" "』" "”" "’" "›" "»")
  "list of right bracket chars.")
(progn
  (setq xah-right-brackets '())
  (dotimes ($x (- (length xah-brackets) 1))
    (when (= (% $x 2) 1)
      (push (char-to-string (elt xah-brackets $x))
            xah-right-brackets)))
  (setq xah-right-brackets (reverse xah-right-brackets)))

(defun xah-backward-left-bracket ()
  "Move cursor to the previous occurrence of left bracket.
  The list of brackets to jump to is defined by `xah-left-brackets'.
  URL `http://ergoemacs.org/emacs/emacs_navigating_keys_for_brackets.html'
  Version 2015-10-01"
  (interactive)
  (re-search-backward (regexp-opt xah-left-brackets) nil t))

(defun xah-forward-right-bracket ()
  "Move cursor to the next occurrence of right bracket.
  The list of brackets to jump to is defined by `xah-right-brackets'.
  URL `http://ergoemacs.org/emacs/emacs_navigating_keys_for_brackets.html'
  Version 2015-10-01"
  (interactive)
  (re-search-forward (regexp-opt xah-right-brackets) nil t))
#+end_src

* keybindings                                                           :custom:
How to Define [[http://xahlee.org/emacs/keyboard_shortcuts.html][Keyboard Shortcuts]] in Emacs
** Project
#+begin_src emacs-lisp
(global-set-key (kbd "C-x C-b")  'project-find-file)
#+end_src

** ESC cancels all
#+begin_src emacs-lisp
(setq auto-window-vscroll nil)
(global-set-key (kbd "<escape>") 'keyboard-escape-quit)
#+end_src


** kill current buffer
It's simple. Bury the scratch buffer
#+begin_src emacs-lisp
(global-set-key (kbd "C-w") 'my-kill-buffer)
#+end_src

** TODO hideshow code blocks (hs-minor-mode)
#+begin_src emacs-lisp
;;(global-set-key (kbd "C-c <right>") 'hs-show-block)
;;(global-set-key (kbd "C-c <left>") 'hs-hide-block)
;;(global-set-key (kbd "C-c <up>") 'hs-show-all)
;;(global-set-key (kbd "C-c <down>") 'hs-hide-all)
#+end_src

** ask before closing emacs (custom/defuns.el)
#+begin_src emacs-lisp
(global-set-key (kbd "C-x C-c") 'ask-before-closing)
;; [M-f4] (global-unset-key (kbd "C-x C-c"))
#+end_src

** buffer switching
#+begin_src emacs-lisp
(global-set-key (kbd "C-b") 'switch-to-buffer)
(global-set-key (kbd "C-S-<tab>") 'next-buffer)
(global-set-key (kbd "C-<tab>") 'previous-buffer)
(add-hook 'org-mode-hook
          '(lambda ()
             (define-key org-mode-map (kbd "C-<tab>") 'previous-buffer)))
#+end_src

** map keys for window manipulation
#+begin_src emacs-lisp
(global-set-key (kbd "M-o") 'other-window)
(global-set-key (kbd "M-p") 'rotate-windows)
(global-set-key (kbd "M-1") 'delete-other-windows)
(global-set-key (kbd "M-2") 'split-window-horizontally)
(global-set-key (kbd "M-3") 'split-window-vertically)
(global-set-key (kbd "M-0") 'delete-window)
#+end_src

** unbind default keys for window manipulation
#+begin_src emacs-lisp
(global-unset-key (kbd "C-x 0")) ; was delete-window
(global-unset-key (kbd "C-x 3")) ; was split-window-horizontally
(global-unset-key (kbd "C-x 2")) ; was split-window-vertically
(global-unset-key (kbd "C-x 1")) ; was delete-other-window
(global-unset-key (kbd "C-x o")) ; was other-window
(global-unset-key (kbd "C-c r")) ; was ??? (org-mode capture)
#+end_src

** resize windows
#+begin_src emacs-lisp
(global-set-key (kbd "S-C-<down>")  'enlarge-window)
(global-set-key (kbd "S-C-<up>")    'shrink-window)
(global-set-key (kbd "S-C-<left>")  'shrink-window-horizontally)
(global-set-key (kbd "S-C-<right>") 'enlarge-window-horizontally)
#+end_src

** save buffer with C-s
#+begin_src emacs-lisp
(global-set-key (kbd "C-s") 'save-buffer)
#+end_src

** move more quickly
#+begin_src emacs-lisp
(global-set-key (kbd "C-<next>")
                (lambda ()
                  (interactive)
                  (ignore-errors (next-line 5))))

(global-set-key (kbd "C-<prior>")
                (lambda ()
                  (interactive)
                  (ignore-errors (previous-line 5))))
#+end_src

** comment marked lines (matlab-like)
#+begin_src emacs-lisp
(global-set-key (kbd "C-t") 'uncomment-region)
(global-set-key (kbd "C-r") 'comment-region)
#+end_src

** toggle toolbar emacs-window
#+begin_src emacs-lisp
(global-set-key [f11] 'tool-bar-mode)
(global-set-key [f12] 'menu-bar-mode)
#+end_src

** join following lines into 1 line (M-j)
#+begin_src emacs-lisp
(global-set-key (kbd "M-j")
                (lambda ()
                  (interactive)
                  (join-line -1)))
#+end_src

** move between brackets
#+begin_src emacs-lisp
(global-set-key (kbd "M-8") 'xah-backward-left-bracket)
(global-set-key (kbd "M-9") 'xah-forward-right-bracket)
#+end_src

** call-last-kbd-macro
#+begin_src emacs-lisp
(global-set-key [f5] 'call-last-kbd-macro)
#+end_src

* recentf                                                               :custom:
- a timer setting for recentf-mode without notifications to echo-area
- https://gist.github.com/masutaka/1325654 (idle timer)
- https://lists.gnu.org/archive/html/help-gnu-emacs/2010-12/msg02019.html
#+begin_src emacs-lisp

(recentf-mode 1)
(setq recentf-max-saved-items 2000)
(setq recentf-exclude '(".recentf"))

(defvar my-recentf-list-prev nil)

(defun my-recentf-save-list ()
  (interactive)
  "If recentf-list and previous recentf-list is equal,
     do nothing. Else recent-save-list and try to hide 'Wrote' message"
  (unless (equal recentf-list my-recentf-list-prev)
    (setq old-message (current-message))
    (recentf-save-list)
    (message old-message)
    (setq my-recentf-list-prev recentf-list)))

(run-with-idle-timer 60 t 'my-recentf-save-list)

#+end_src

* encoding                                                              :custom:
- http://www.masteringemacs.org/articles/2012/08/09/working-coding-systems-unicode-emacs/
#+begin_src emacs-lisp
(prefer-coding-system 'utf-8)
(set-default-coding-systems 'utf-8)
(set-terminal-coding-system 'utf-8)
(set-keyboard-coding-system 'utf-8)

(add-to-list 'file-coding-system-alist '("\\.tex" . utf-8))
(add-to-list 'file-coding-system-alist '("\\.txt" . utf-8))
(add-to-list 'file-coding-system-alist '("\\.org" . utf-8))
(add-to-list 'file-coding-system-alist '("\\.el" . utf-8))

;; cliplboard
(set-selection-coding-system 'utf-8)
(set-clipboard-coding-system 'utf-16-le)
(set-selection-coding-system 'utf-16-le)
#+end_src

* indendation                                                           :custom:
#+begin_src emacs-lisp
;; use whitespaces instead of TAB
(setq-default indent-tabs-mode nil)

;; 1 TAB equals N spaces
(setq tab-width 2)

;; use TAB function for identation
(setq indent-line-function 'insert-tab)
#+end_src

* window title                                                          :custom:
- adjust window title to "emacs: path/actual-buffer"
#+begin_src emacs-lisp
(setq frame-title-format
      '("" invocation-name ": "
        (:eval (if (buffer-file-name)
                   (abbreviate-file-name (buffer-file-name))
                 "%b"))))
#+end_src

* timestamp                                                             :custom:
- update timestamps on save
#+begin_src emacs-lisp
(setq
 time-stamp-active t
 ;; check first 10 buffer lines for Time-stamp:
 time-stamp-line-limit 10
 ;; date format
 time-stamp-format "%02d.%02m.%Y"
 ;; identifier
 time-stamp-start "Changed: "
 time-stamp-end "$")

(add-hook 'write-file-hooks 'time-stamp)
#+end_src

* abbreviation                                                          :custom:
#+begin_src emacs-lisp
(define-abbrev-table 'global-abbrev-table '(

 ("9t" "tar_target(@@),")
 ("9tt" "tar_target(@@, format = \"fst_tbl\"),")

 ("9m" "targets::tar_make()")
 ("9mm" "targets::tar_make(reporter = \"summary\")")

 ("9v" "targets::tar_visnetwork()")
 ("9vv" "targets::tar_visnetwork(targets_only = TRUE)")

 ("9l" "targets::tar_load(@@)")
 ("9r" "targets::tar_read(@@)")

 ("9p" "paint::paint(@@)")

 ("8png" "png(filename = \"@@.png\", units = \"cm\", res = 300, width = 16, height = 10)\n\ndev.off()")

 ("8r" "`r @@`")
 ("8rr" "```{r}\n@@\n```")
 ("8ra" "&rarr;")

 ("8R" "#+begin_src R\n@@\n#+end_src")
 ))

;; stop asking whether to save newly added abbrev when quitting emacs
(setq save-abbrevs nil)

;; turn on abbrev mode globally
(setq-default abbrev-mode t)

;; https://stackoverflow.com/questions/15375759/how-to-control-cursor-placement-in-emacs-abbrev-expansion
(defadvice expand-abbrev (after my-expand-abbrev activate)
   ;; if there was an expansion
   (if ad-return-value
       ;; start idle timer to ensure insertion of abbrev activator
       ;; character (e.g. space) is finished
       (run-with-idle-timer 0 nil
                            (lambda ()
                              ;; if there is the string "@@" in the
                              ;; expansion then move cursor there and
                              ;; delete the string
                              (let ((cursor "@@"))
                                (if (search-backward cursor last-abbrev-location t)
                                    (delete-char (length cursor))))))))
 #+end_src

 #+RESULTS:
 : expand-abbrev

* electric-pair                                                         :custom:
- close automatically brackets
- http://prodissues.com/2016/10/electric-pair-mode-in-emacs.html
- https://www.emacswiki.org/emacs/ElectricPair (for specific modes only)
#+begin_src emacs-lisp
(electric-pair-mode 1)
(setq electric-pair-pairs '(
                            (?\" . ?\")
                            (?\` . ?\`)
                            (?\( . ?\))
                            (?\{ . ?\})
                            (?\[ . ?\])
                            ))
#+end_src

* dired                                                                 :custom:
#+begin_src emacs-lisp
;; windows style
(setq ls-lisp-verbosity nil)

;; order directories first
(setq ls-lisp-dirs-first t)

;; windows behaviour (error message in emacs-25.1)
;;(setq ls-lisp-emulation 'MS Windows)

;; no domain with login name
(setq ls-lisp-ignore-case t)

;; sort by extension
(setq dired-listing-switches "-alX")

;; backspace behaves like in Total Comander
(add-hook 'dired-mode-hook
          (lambda ()
            (local-set-key [backspace] 'dired-up-directory)))
#+end_src

* gnupg                                                                 :custom:
#+begin_src emacs-lisp
(setq epg-gpg-program "gpg2")

(setq epa-file-name-regexp "\\.\\(gpg\\|asc\\)$")
(epa-file-name-regexp-update)
(setq epa-file-cache-passphrase-for-symmetric-encryption t)
#+end_src

* mode-line                                                             :custom:
#+begin_src emacs-lisp
;; ;; show line-number in the mode line
;; (line-number-mode 1)
;;
;; ;; show column-number in the mode line
;; (column-number-mode 1)
;;
;; ;; show time (and date) in the mode line
;; ;; (setq display-time-day-and-date t)
;; (setq display-time-24hr-format t)
;; (display-time)

;; http://emacs-fu.blogspot.de/2011/08/customizing-mode-line.html
;; use setq-default to set it for /all/ modes
(setq-default mode-line-format
              (list
               ;; the buffer name; the file name as a tool tip
               '(:eval (propertize "%b "
                                   'help-echo (buffer-file-name)))

               ;; line and column
               "(%02l,%02c) "

               ;; ;; relative position, size of file
               "[%p/%I] "

               ;; the current major mode for the buffer.
               "["
               '(:eval (propertize "%m" 'help-echo buffer-file-coding-system))
               "] "

               "[" ;; insert vs overwrite mode, input-method in a tooltip
               '(:eval (propertize (if overwrite-mode "Ovr" "Ins")
                                   'help-echo (concat "Buffer is in "
                                                      (if overwrite-mode "overwrite" "insert") " mode")))

               ;; was this buffer modified since the last save?
               '(:eval (when (buffer-modified-p)
                         (concat ","  (propertize "Mod"
                                                  'help-echo "Buffer has been modified"))))

               ;; is this buffer read-only?
               '(:eval (when buffer-read-only
                         (concat ","  (propertize "RO"
                                                  'help-echo "Buffer is read-only"))))
               ;; "] "
               "]"
               ;; ;; add the time, with the date and the emacs uptime in the tooltip
               ;; '(:eval (propertize (format-time-string "%H:%M")
               ;;           'help-echo
               ;;           (concat (format-time-string "%c; ")
               ;;                   (emacs-uptime "Uptime:%hh%mm"))))
               " "
               ;; i don't want to see minor-modes; but if you want, uncomment this:
               ;; minor-mode-alist  ;; list of minor modes

               ;; i want to see the 'pomodoro' status using (%M = global-mode-string)
               "%M"
               "%-" ;; fill with '-'
               ))
#+end_src

* python                                                                :custom:
#+begin_src emacs-lisp
(defun my-python-start ()
  (interactive)
  (if (not (member "*Python*" (mapcar (function buffer-name) (buffer-list))))
      (progn (call-interactively 'run-python))))
;; Start python if not started. Send region if selected, line if not selected (whole def if it is def)
;; http://www.reddit.com/r/emacs/comments/1h4hyw/selecting_regions_pythonel/
(defun my-python-eval ()
  (interactive)
  (my-python-start)
  (if (and transient-mark-mode mark-active)     ; Check if selection is present
      (python-shell-send-region (point) (mark)) ; If selected, send region
    ;; If not selected, do all the following
    (beginning-of-line)                         ; Move to the beginning of line
    (if (looking-at "def")                      ; Check if the first word is def (function def)
        (progn                                  ; If it is def
          (python-shell-send-defun ())          ; Send whole def
          (python-nav-end-of-defun)             ; Move to the end of def
          (python-nav-forward-statement)        ; Move to the next statement
          )
      ;; If it is not def, do all the following
      (python-shell-send-region (point-at-bol) (point-at-eol))  ; Send the current line
      (python-nav-forward-statement)                            ; Move to the next statement
      )
    ;; Activate shell window, and switch back
    (progn
      (setq w-script (selected-window))         ; Remeber the script window
      (python-shell-switch-to-shell)            ; Switch to the shell
      (select-window w-script)                  ; Switch back to the script window
      )
    ))
;; Define hooks
(add-hook 'python-mode-hook             ; For Python script
          '(lambda()
             (local-set-key (kbd "<S-return>") 'my-python-eval)
             (local-set-key (kbd "<C-return>") 'my-python-eval)))

(setq python-shell-completion-native-enable nil)
#+end_src

* matlab (octave-mode)                                                  :custom:
- highlighting using build-in octave-mode
#+begin_src emacs-lisp
(add-to-list 'auto-mode-alist '("\\.m\\'" . octave-mode))
#+end_src

* org-mode                                                              :custom:
** general settings
#+begin_src emacs-lisp

(add-to-list 'auto-mode-alist '("\\.org\\'" . org-mode))

;; indentation with golbal-visual-line-mode
(setq org-startup-indented t)
(setq org-adapt-indentation nil)
(setq org-indent-indentation-per-level 1)
(setq org-indent-mode-turns-on-hiding-stars t)

;; enabling shift select
(setq org-support-shift-select t)

(setq org-startup-folded t)
(setq org-cycle-separator-lines 0)
(setq org-tags-column -80)
(setq org-agenda-tags-column -80)

;; german day and month names, week starts with monday
(setq calendar-week-start-day 1
      calendar-day-name-array
      ["Sonntag" "Montag" "Dienstag" "Mittwoch"
       "Donnerstag" "Freitag" "Samstag"]
      calendar-month-name-array
      ["Januar" "Februar" "Maerz" "April" "Mai"
       "Juni" "Juli" "August" "September"
       "Oktober" "November" "Dezember"])

;; TODO keyword order
(setq org-todo-keywords
      '((sequence "TODO(t)" "STARTED(s!)" "WAITING(w@/!)" "APPT(a)" "PROJ(p)"
                  "|" "DONE(d!)" "DELEGATED(g@)" "CANCELED(c@)")))

(setq org-todo-keyword-faces
      '(;;("TODO"  . (:foreground "#b70101" :weight bold))
        ;;("STARTED"  . (:foreground "#b70101" :weight bold))
        ;;("APPT"  . (:foreground "sienna" :weight bold))
        ("PROJ"  . (:foreground "blue" :weight bold))
        ("WAITING"  . (:foreground "orange" :weight bold))
        ;;("DONE"  . (:foreground "forestgreen" :weight bold))
        ;;("CANCELED"  . shadow)
        ))

(setq org-agenda-filter-preset '("-someday"))

;; Truncate clocked-in tasks in mode-line def. 0
(setq org-clock-string-limit 8)

;; log DONE statuses
(setq org-log-done t)
;; log changed schedules
(setq org-log-reschedule (quote time))
;; log changed deadlines
(setq org-log-redeadline (quote time))
;; Einen eigenen Drawer benutzen
(setq org-drawers (quote ("PROPERTIES" "CLOCKTABLE" "LOGBOOK" "CLOCK")))
(setq org-log-into-drawer t)
;; Save clock data and notes in a separate drawer
(setq org-clock-into-drawer "CLOCK")


;; agenda settings
(setq org-agenda-restore-windows-after-quit t)
(setq org-agenda-show-all-dates t)
(setq org-agenda-skip-deadline-if-done t)
(setq org-agenda-skip-scheduled-if-done t)

;; respect STARTUP: overview and don't unfold everything
(setq org-agenda-inhibit-startup nil)

;; only 1 day in agenda view
(setq org-agenda-span 1)

;; Set the times to display in the time grid
(setq org-agenda-time-grid (quote
                            ((daily today require-timed)
                             (0900 1100 1300 1500 1700)
                             "......" "----------------")))

;; max. 4 weeks
(setq org-deadline-warning-days 28)

;; round time-stamps to 5 minutes
;;(setq org-time-stamp-rounding-minutes '(0 5))

;; fast selection for states
(setq org-use-fast-todo-selection t)

;; Make it impossible to complete a task if subtasks are not done --> t (yes) nil (no)
(setq org-enforce-todo-dependencies nil)

;; this is my org-directory
(setq org-directory "~/.emacs.d/org")

;; link my GTD file to the agenda
(setq org-agenda-files (quote ("~/.emacs.d/org/home.org"
                               "~/.emacs.d/org/ieeh.org"
                               "~/.emacs.d/org/birthdays.org")))

;; create org-capture-template "Aufgaben"
(setq org-capture-templates
      '(("h" "Aufgabe HOME" entry (file+headline "~/.emacs.d/org/home.org" "Aufgaben")
         "** TODO %?\n   SCHEDULED: %t\n %i\n")
        ("w" "Aufgabe IEEH" entry (file+headline "~/.emacs.d/org/ieeh.org" "Aufgaben")
         "** TODO %?\n   SCHEDULED: %t\n %i\n")))

;; ;; refile (C-c C-w) complete headings
;; (setq org-refile-targets (quote (("gtd.org" :maxlevel . 1)
;;                                  ("someday.org" :level . 2))))

;; ;; while in org-agenda-mode: highlight current line
;; (add-hook 'org-agenda-mode-hook '(lambda () (hl-line-mode 1)))

;; do not change states when archive TODOs
(setq org-archive-mark-done nil)

;; html in browser and pdf in system deafult
(setq org-file-apps (quote ((auto-mode . emacs)
                            ("\\.x?html?\\'" . system)
                            ("\\.pdf\\'" . system))))

#+end_src

** keybindings
#+begin_src emacs-lisp
(defun home ()
  (interactive)
  (find-file "~/.emacs.d/org/home.org"))

(defun ieeh ()
  (interactive)
  (find-file "~/.emacs.d/org/ieeh.org"))

(add-hook 'org-mode-hook
          '(lambda ()
             (local-set-key (kbd "S-C-<down>")  'enlarge-window)
             (local-set-key (kbd "S-C-<up>")    'shrink-window)
             (local-set-key (kbd "S-C-<left>")  'shrink-window-horizontally)
             (local-set-key (kbd "S-C-<right>") 'enlarge-window-horizontally)))

(global-set-key [f9] 'home)
(global-set-key [f10] 'ieeh)

(global-set-key (kbd "C-c a") 'org-agenda)
(global-set-key (kbd "C-c c") 'org-capture)
(global-set-key (kbd "C-c l") 'org-store-link)
#+end_src

** custom agenda views
- https://blog.aaronbieber.com/2016/09/24/an-agenda-for-life-with-org-mode.html
#+begin_src emacs-lisp

(setq org-agenda-custom-commands
      '(("w" "Agenda at work"
         ((tags "aa"
                ((org-agenda-skip-function '(org-agenda-skip-entry-if 'todo 'done))
                 (org-agenda-overriding-header "Aktuelle Aufgaben:")))
          (agenda "" ((org-agenda-files
                       '("~/.emacs.d/org/ieeh.org"
                         "~/.emacs.d/org/birthdays.org"))))))

        ("h" "Agenda at home"
         ((agenda "" ((org-agenda-files
                       '("~/.emacs.d/org/home.org"
                         "~/.emacs.d/org/birthdays.org"))))))

        ("W" "Tasks at Work"
         ((tags-todo "IEEH-Lehre" ((org-agenda-overriding-header "Institut")))
          (tags-todo "Lehre" ((org-agenda-overriding-header "Lehre & Betreuung")))
          (tags-todo "Paper|Lit" ((org-agenda-overriding-header "Veröffentlichungen & Literatur")))
          (tags-todo "TnBW" ((org-agenda-overriding-header "Transnet BW")))
          (tags-todo "TnnT" ((org-agenda-overriding-header "Tennet")))
          (tags-todo "DM-Paper-Mess-Server-Lit" ((org-agenda-overriding-header "Data mining")))
          (tags-todo "Fortb" ((org-agenda-overriding-header "Fortbildung")))
          (tags-todo "Mess|Server" ((org-agenda-overriding-header "Messprogramm")))))

        ("H" "Tasks at Home"
         ((tags-todo "HOME-Web-Buch-Film-Musik-Kaufen" ((org-agenda-overriding-header "Aufgaben")))
          (tags-todo "Kalender" ((org-agenda-overriding-header "Kalender")))
          (tags-todo "Finanzen" ((org-agenda-overriding-header "Finanzen")))
          (tags-todo "Kaufen" ((org-agenda-overriding-header "Einkaufsliste")))
          (tags-todo "Buch|Film|Musik" ((org-agenda-overriding-header "Unterhaltung")))
          (tags-todo "Web" ((org-agenda-overriding-header "Web-Links")))
          (tags-todo "Computer" ((org-agenda-overriding-header "Computer")))))

        ("f" "Someday Tasks"
         ((tags-todo "someday"
                     ((org-agenda-filter-preset '("+someday"))
                      (org-agenda-overriding-header "Someday Tasks")))))
        ))

#+end_src

** org-babel for R, emacs-lisp & LaTeX
#+begin_src emacs-lisp

(org-babel-do-load-languages
 'org-babel-load-languages
 '((emacs-lisp . t)
   (R . t)
   (ledger . t)
   (python . t)
   (latex . t)
   (dot . t)))

(defun my-org-edit-src-save-key ()
  (local-set-key (kbd "C-s") 'org-edit-src-save))

(add-hook 'org-src-mode-hook 'my-org-edit-src-save-key)

;; display the source code edit buffer in the current window, keeping
;; all other windows
(setq org-src-window-setup 'current-window)
;;(setq org-src-window-setup 'reorganize-frame)

(setq org-edit-src-auto-save-idle-delay 20) ;; in seconds; default 0 = off

;; preserve the indentation after editing a code block
(setq org-edit-src-content-indentation 0
      org-src-tab-acts-natively t
      org-src-preserve-indentation t)

;; I don't want to be prompted on every code block evaluation
(setq org-confirm-babel-evaluate nil)

;; Don't execute code blocks with C-c C-c use C-c C-v e instead
(setq org-babel-no-eval-on-ctrl-c-ctrl-c nil) ;; nil t

;; color my SRC code natively
(setq org-src-fontify-natively t)
#+end_src

** auto-update [x/y] in headers
- http://whattheemacsd.com/setup-org.el-01.html
#+begin_src emacs-lisp
(defun myorg-update-parent-cookie ()
  (when (equal major-mode 'org-mode)
    (save-excursion
      (ignore-errors
        (org-back-to-heading)
        (org-update-parent-todo-statistics)))))

(defadvice org-kill-line (after fix-cookies activate)
  (myorg-update-parent-cookie))

(defadvice kill-whole-line (after fix-cookies activate)
  (myorg-update-parent-cookie))
#+end_src
* xah-find                                                              :custom:
- http://ergoemacs.org/emacs/elisp-xah-find-text.html
- reposository: https://github.com/maxmagmilch/xah-find
#+begin_src emacs-lisp
(load "~/.emacs.d/site-lisp/xah-find.el")
#+end_src


* ivy                                                               :usepackage:
- http://oremacs.com/swiper/#introduction
- https://sam217pa.github.io/2016/09/13/from-helm-to-ivy/
#+begin_src emacs-lisp
(use-package ivy
  :ensure t
  :diminish (ivy-mode . "")
  ;; :custom-face
  ;; (ivy-virtual ((t :foreground #7F7F7F)))
  ;; (ivy-current-match ((t :inherit 'hl-line)))
  ;; (ivy-minibuffer-match-face-2 ((t :background "#dddddd" :weight bold)))
  :config
  (ivy-mode 1)
  (setq ivy-display-style nil) ; 'fancy nil
  ;; use recentf and bookmark files
  (setq ivy-use-virtual-buffers t)
  ;; no "^" for counsel-M-x etc.
  (setq ivy-initial-inputs-alist nil)
  ;; No extra directories "./" and "../" in find-file
  (setq ivy-extra-directories '("./"))
  ;; custom faces for ivy-switch-buffer
  ;; M-x list-faces-display
  ;; (setq ivy-switch-buffer-faces-alist
  ;;       '((dired-mode . ivy-subdir)
  ;;         (org-mode . ivy-org)))
  ;; minibuffer
  (bind-key "C-SPC" 'ivy-restrict-to-matches ivy-minibuffer-map)
  (bind-key "<next>" 'ivy-scroll-up-command ivy-minibuffer-map)
  (bind-key "<prior>" 'ivy-scroll-down-command ivy-minibuffer-map)
  (bind-key "C-m" 'ivy-alt-done ivy-minibuffer-map)
  (setq ivy-count-format "(%d/%d) ")
  ;; allow input not in order while searching
  (setq ivy-re-builders-alist '((t . ivy--regex-ignore-order))))
#+end_src

* counsel (for ivy)                                                 :usepackage:
#+begin_src emacs-lisp

;; dont truncate lines in minibuffer
;; to fully see long file names with counsel-find-file
(add-hook 'minibuffer-setup-hook
      (lambda () (setq truncate-lines nil)))

(use-package counsel
  :ensure t
  :config
  ;; ignore . files or temporary files
  (setq counsel-find-file-ignore-regexp
        (concat
         ;; File names beginning with # or .
         "\\(?:\\`[#.]\\)"
         ;; File names ending with # or ~
         "\\|\\(?:\\`.+?[#~]\\'\\)"
         ;; File names ending with .aux
         "\\|\\.aux\\'"))
  :bind
  ("C-f" . swiper) ; swiper-isearch
  ("<f2>" . ivy-resume)
  ("M-y" . counsel-yank-pop)
  ("M-x" . counsel-M-x)
  ("C-x C-f" . counsel-find-file)
  ("C-x C-r" . counsel-buffer-or-recentf)
  ("<f1> v" . counsel-describe-variable)
  ("<f1> f" . counsel-describe-function)
  ("<f1> k" . counsel-descbinds))
#+end_src

* swiper (for ivy)                                                  :usepackage:
#+begin_src emacs-lisp
(use-package swiper
  :ensure t)
#+end_src

* smex (for ivy)                                                    :usepackage:
- enable history for M-x commands
#+begin_src emacs-lisp
(use-package smex
  :ensure t)
#+end_src

* multiple-cursors                                                  :usepackage:
#+begin_src emacs-lisp
(use-package multiple-cursors
  :ensure t
  :bind
  ("C-<" . mc/mark-next-like-this)
  ("C->" . mc/unmark-next-like-this)
  ("C-c C-<" . mc/mark-all-like-this)
  ("M-n" . mc/insert-numbers))
#+end_src


* htmlize                                                           :usepackage:
#+begin_src emacs-lisp
(use-package htmlize
  :ensure t)
#+end_src

* hl-todo                                                           :usepackage:
- https://github.com/tarsius/hl-todo/tree/42f744ffb513cf2b95517144c64dbf3fc69f711a
- Highlight TODO and similar keywords in comments and strings
#+begin_src emacs-lisp
(use-package hl-todo
       :ensure t
       :custom-face
       (hl-todo ((t (:inherit hl-todo :italic t))))
       :hook ((prog-mode . hl-todo-mode)
              (yaml-mode . hl-todo-mode))
       :init
       (setq hl-todo-keyword-faces '(
               ("TODO"   . (:weight bold :foreground "#FF0000"))
               ("FIXME"  . (:weight bold :foreground "#FF0000"))
               ("DEBUG"  . (:weight bold :foreground "#A020F0"))
               ))
       :config
       (define-key hl-todo-mode-map (kbd "C-c p") 'hl-todo-previous)
       (define-key hl-todo-mode-map (kbd "C-c n") 'hl-todo-next)
       (define-key hl-todo-mode-map (kbd "C-c o") 'hl-todo-occur)
       (define-key hl-todo-mode-map (kbd "C-c i") 'hl-todo-insert))
#+end_src

* leuven-theme                                                      :usepackage:
#+begin_src emacs-lisp
(use-package leuven-theme
  :ensure t
  ;;:disabled t
  :custom-face
  (font-latex-sectioning-0-face ((t (:height 1.5))))
  (font-latex-sectioning-1-face ((t (:height 1.4))))
  (org-document-title ((t (:height 1.4))))
  :init
  (setq leuven-scale-outline-headlines nil)
  (setq leuven-scale-org-agenda-structure 1.2)
  (setq org-fontify-whole-heading-line t)
  (setq org-todo-keyword-faces
        '(("PROJ"  . (:weight bold :box (:line-width 1 :color "#C8ABD8") :foreground "#C8ABD8" :background "#E0E0F9"))
          ("WAITING"  . (:weight bold :box (:line-width 1 :color "#BFBF65") :foreground "#BFBF65" :background "#FFFFCC"))))
  :config
  (load-theme 'leuven t))
#+end_src

* auctex                                                            :usepackage:
#+begin_src emacs-lisp
(use-package tex
  :ensure auctex
  :defer t
  :init
  ;; use PDF-LaTeX
  (setq TeX-PDF-mode t)
  (setq latex-run-command "pdflatex")
  ;; multifiles - query for master file.
  (setq-default TeX-master nil)
  ;; add custom created LaTeX commands
  (setq font-latex-match-reference-keywords
        '(("todo" "[{") ("discuss" "[{"))))
#+end_src

* ace-jump-mode (similar to avy)                                    :usepackage:
#+begin_src emacs-lisp
(use-package ace-jump-mode
  :ensure t
  :bind ("M-SPC" . ace-jump-mode)
  :init
  (add-hook 'org-mode-hook
            '(lambda ()
               (define-key org-mode-map (kbd "M-SPC") 'ace-jump-mode)
               ))
  (add-hook 'inferior-ess-mode-hook
            '(lambda ()
               (local-set-key (kbd "M-SPC") 'ace-jump-mode)
               )))
#+end_src

* ace-window                                                        :usepackage:
#+begin_src emacs-lisp
(use-package ace-window
  :ensure t
  :bind ("M-o" . ace-window)
  :init
  (setq aw-keys '(?a ?s ?d ?f ?g ?h ?j ?k ?l)))
#+end_src


* move-text                                                         :usepackage:
#+begin_src emacs-lisp
(use-package move-text
  :ensure t
  :init (move-text-default-bindings))
#+end_src

* rainbow-delimiters                                                :usepackage:
   - https://github.com/Fanael/rainbow-delimiters
#+begin_src emacs-lisp
(use-package rainbow-delimiters
  :ensure t
  :init
  ;; emacs-lisp
  (add-hook 'emacs-lisp-mode-hook 'rainbow-delimiters-mode)
  ;; python
  (add-hook 'python-mode-hook 'rainbow-delimiters-mode)
  ;; latex
  (add-hook 'tex-mode-hook 'rainbow-delimiters-mode)
  (add-hook 'LaTeX-mode-hook 'rainbow-delimiters-mode)
  ;; emacs speaks statistics R
  (add-hook 'ess-mode-hook 'rainbow-delimiters-mode))
;;(add-hook 'inferior-ess-mode-hook 'rainbow-delimiters-mode))
#+end_src

* goto-change                                                       :usepackage:
#+begin_src emacs-lisp
(use-package goto-chg
  :ensure t
  :bind
  ("M-," . goto-last-change)
  ("M-." . goto-last-change-reverse))
#+end_src

* ledger-mode                                                       :usepackage:
#+begin_src emacs-lisp
(use-package ledger-mode
  :ensure t
  :defer t
  :init
  (autoload 'ledger-mode "ledger-mode" "A major mode for Ledger" t)
  (add-to-list 'auto-mode-alist '("\\.ledger$" . ledger-mode)))
#+end_src

* org-pomodoro                                                      :usepackage:
#+begin_src emacs-lisp
(use-package org-pomodoro
  :ensure t
  :bind
  ("<f4>" . org-pomodoro)
  :init
  (add-hook 'org-pomodoro-finished-hook 'ding)
  (add-hook 'org-pomodoro-break-finished-hook 'ding)
  :config
  (setq org-pomodoro-format "W%s")
  (setq org-pomodoro-short-break-format "B%s")
  (setq org-pomodoro-long-break-format "LB%s")
  (setq org-pomodoro-time-format "%.2m")
  (setq org-pomodoro-keep-killed-pomodoro-time t))
#+end_src

* emacs speaks statistics                                           :usepackage:
- c:\Program Files\R\R-4.1.0\library\base\R\Rprofile
- add: .libPaths("D:/Daten/R/Library")
** FIX custom functions
#+begin_src emacs-lisp
(defun R_insert_pipe_operator ()
  "R - %>% operator or 'then' pipe operator"
  (interactive)
  (just-one-space 1)
  (insert "%>%")
  (just-one-space 1))
  ;;(reindent-then-newline-and-indent))

(defun R_eval_current_line_and_step ()
  "cause Shift+Enter to send the current line to *R*"
  (interactive)
  (if (and transient-mark-mode mark-active)
      (call-interactively 'ess-eval-region)
    (call-interactively 'ess-eval-line-and-step)))

(defun tar-load-target-at-point ()
  "call targets::tar_load on object at point to load it into environment."
  (interactive)
  (let ((target (symbol-at-point)))
    (ess-eval-linewise (format "targets::tar_load(%s)\n" target))))

;; fnmate (create R/function.R for written function())

;; https://github.com/MilesMcBain/fnmate/blob/master/vignettes/ess_bindings.Rmd
(defun text-around-cursor (&optional rows-around)
  (let ((rows-around (or rows-around 10))
  (current-line (line-number-at-pos))
  (initial-point (point)))
    (save-mark-and-excursion
      (goto-line (- current-line rows-around))
      (set-mark (point))
      (goto-line (+ current-line rows-around))
      (end-of-line)
      ;; Return a list of text, index
      (list (buffer-substring-no-properties (mark) (point))
            (+ (- initial-point (mark)) 1)))))

(defun strip-ess-output-junk (r-buffer)
  (with-current-buffer r-buffer
    (goto-char (point-min))
    (while (re-search-forward "\\+\s" nil t)
      (replace-match ""))))

(defun exec-r-fn-to-buffer (r_fn text)
  (let ((r-process (ess-get-process))
        (r-output-buffer (get-buffer-create "*R-output*")))
    (ess-string-command
     (format "cat(%s(%s))\n" r_fn text)
     r-output-buffer nil)
    (strip-ess-output-junk r-output-buffer)
    (save-mark-and-excursion
      (goto-char (point-max))
      (newline)
      (insert-buffer r-output-buffer))))

;; fnmate functions for keybindings
 (defun fnmate ()
   (interactive)
   (let* ((input-context (text-around-cursor))
          (text (prin1-to-string (car input-context)))
          (index (cdr input-context)))
     (ess-eval-linewise (format "fnmate::fnmate_fn.R(%s, %s)" text index))))

(defun fnmate-below ()
  (interactive)
  (let* ((input-context (text-around-cursor))
         (text (prin1-to-string (car input-context)))
         (index (cdr input-context))
         (args (format "%s, %s" text index)))
    (exec-r-fn-to-buffer "fnmate::fnmate_below" args)))
#+end_src

** settings
#+begin_src emacs-lisp
(use-package ess
  :ensure t
  :commands R
  :init
  (require 'ess-site)
  (add-hook 'inferior-ess-mode-hook '(lambda ()
                                       ;;(local-set-key (kbd "C-c TAB") 'ess-complete-object-name)
                                       (local-set-key (kbd ";") 'ess-insert-assign)
                                       (local-set-key (kbd "M--") 'ess-insert-assign)
                                       (local-set-key (kbd "<backtab>") 'R_insert_pipe_operator)))
  (add-hook 'ess-mode-hook '(lambda ()
                              ;;(local-set-key (kbd "C-c TAB") 'ess-complete-object-name)
                              (local-set-key (kbd ";") 'ess-insert-assign)
                              (local-set-key (kbd "M--") 'ess-insert-assign)
                              (local-set-key (kbd "<backtab>") 'R_insert_pipe_operator)
                              (local-set-key [(shift return)] 'R_eval_current_line_and_step)
                              ;;(local-set-key (kbd "") 'fnmate)
                              ;;(local-set-key (kbd "") 'fnmate-below)
                              ))
  :config
  (setq ess-auto-width 'window)
  ;; no visible history on eval
  (setq ess-eval-visibly nil)
  ;; start R in current working directory and no history
  (setq ess-ask-for-ess-directory nil)
  (setq ess-local-process-name "R")
  (setq ess-history-file nil)
  ;; only one help frame
  (setq ess-help-own-frame 'one)
  ;; on input/output show the bottom line
  (setq comint-scroll-to-bottom-on-input t)
  (setq comint-scroll-to-bottom-on-output t)
  (setq comint-move-point-for-output t)
  ;; identation
  ;;(set 'ess-arg-function-offset t)
  ;; 't', hitting TAB always just indents the current line.
  ;; If complete, TAB first tries to indent the current line, and if the line
  ;; was already indented, then try to complete the thing at point.
  (setq tab-always-indent 'complete)
  (setq ess-style 'RStudio)
  (setq ess-indent-with-fancy-comments nil))
#+end_src

* yaml-mode                                                         :usepackage:
#+begin_src emacs-lisp
(use-package yaml-mode
  :ensure t
  :init
  (add-to-list 'auto-mode-alist '("\\.yml\\'" . yaml-mode)))
#+end_src

* magit                                                             :usepackage:
#+begin_src emacs-lisp
(use-package magit
  :ensure t)
#+end_src

* polymode (Rmarkdown)                                              :usepackage:
- R:
  - install.packages("rmarkdown", repos = "https://ftp.fau.de/cran/")
  - install.packages("bookdown", repos = "https://ftp.fau.de/cran/")
- Windows:
  - install pandoc (https://pandoc.org/)
  - windows cmd: type "chcp 65001" to set the encoding to UTF-8
  - windows cmd: type "pandoc --version" to check version
#+begin_src emacs-lisp
(use-package poly-markdown
  :ensure t)

(use-package poly-R
  :ensure t)

(use-package polymode
  :ensure t
  :init
  (require 'poly-R)
  (require 'poly-markdown)
  :config
  (add-to-list 'auto-mode-alist '("\\.md$" . poly-markdown-mode))
  (add-to-list 'auto-mode-alist '("\\.Rmd$" . poly-markdown+r-mode))
  (setq polymode-display-output-file nil)
  (setq markdown-max-image-size (cons 600  nil)))

(defun polymode-insert-r-chunk (header)
  ;; https://emacs.stackexchange.com/a/27419
  "Insert an r-chunk in markdown mode. Necessary due to interactions between polymode and yas snippet"
  (interactive "sHeader: ")
  (insert (concat "```{r " header "}\n\n```"))
  (forward-line -1))
#+end_src

* DISABLED projectile                                               :usepackage:
- setting for 'ivy' completion
- just use project.el (emacs 26.1+)
#+begin_src emacs-lisp
;; (use-package projectile
;;   :ensure t
;;   :disabled t
;;   :init
;;   (projectile-global-mode)
;;   (setq projectile-indexing-method 'native)
;;   (setq projectile-completion-system 'ivy)
;;   (setq projectile-enable-caching t)
;;   :config
;;   (define-key projectile-mode-map (kbd "C-c p") 'projectile-command-map))
#+end_src

* DISABLED highlight-indentation (for python)                       :usepackage:
#+begin_src emacs-lisp
;;(use-package highlight-indentation
;;  :ensure t
;;  :disabled t
;;  :init
;;  (setq highlight-indentation-blank-lines t)
;;  ;; python
;;  (add-hook 'python-mode-hook 'highlight-indentation-mode)
;;  :config
;;  (set-face-background 'highlight-indentation-face "#f1f1f1")
;;  (set-face-background 'highlight-indentation-current-column-face "#d1d1d1"))
#+end_src
